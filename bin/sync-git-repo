#!/usr/bin/env bash

# TODO: 1.Add parameter to deal Depth

# Sync git repository.
# Globals:
#   color-print
#   git
#   is-git-repo
#   current-git-branch
# Arguments:
#   Folder Path
#   Remote Repository Name
#   Remote Repository Path
#   Branch Name (Optional)
#   Depth (Optional)
# Returns:
#   None

declare -r default_git_commit_message='Sync latest settings.'

function usage() {
  echo -e "usage: $(basename "$0") [options] local_folder_path

[options]:
-r  remote repository path
    For example: https://github.com/SharryXu/dotfiles
-b  branch. Default value is master.
-s  source name. Default value is origin.
-t  target name. Default value is origin.
-f  directly push unstaged changes.
-h  help information.

Warning: For now, we assume the branch name in source and target are the same."
  exit 1
}

branch="master"
source_name="origin"
target_name="origin"
local_repo_path=""
remote_repo_path=""
directly_push=false

while getopts "r:b:s:t:hf" option; do
  case $option in
    r) remote_repo_path=${OPTARG}
       if [[ "$remote_repo_path" != "git@"* && "$remote_repo_path" != "https"* ]]; then
         color-print 3 "The remote repository path has invalid format."
         exit 1
       fi
       ;;
    b) if [[ -z "${OPTARG}" ]]; then
         color-print 3 "The branch name cannot be empty or whitespaces."
         exit 1
       fi
       branch=${OPTARG}
       ;;
    s) if [[ -z "${OPTARG}" ]]; then
         color-print 3 "The source ref name cannot be empty or whitespaces."
         exit 1
       fi
       source_name=${OPTARG}
       ;;
    t) if [[ -z "${OPTARG}" ]]; then
         color-print 3 "The target ref name cannot be empty or whitespaces."
         exit 1
       fi
       target_name=${OPTARG}
       ;;
    f) directly_push=true
       ;;
    h) usage
       ;;
    *) usage
       ;;
  esac
done

shift $((OPTIND-1))

function update_all_branchs() {
  for file in "$local_repo_path"/.git/refs/heads/*; do
    local current_head="${file##*/}"
    color-print 0 "Pulling latest code for $current_head branch..."
    git checkout "$current_head" && git pull "$target_name" "$current_head"
  done
}

function commit_exist_changes() {
  if [[ -z "$(git status --porcelain)" ]]; then
    color-print 0 "Current repository is clean."
  else
    if choose-yes-or-no "Do you want to commit those changes?"; then
      color-print 0 "Please provide appropriate message:"
      read -r commitMessage
      if [[ -z $commitMessage ]]; then
        commitMessage=$default_git_commit_message
      fi

      git add . && git commit -m "$commitMessage"

      if $directly_push || choose-yes-or-no "Do you want to push those changes?"; then
        git push -u "$target_name" "$branch" && git push
        if [[ $? == true ]]; then
          color-print 1 "Push changes success."
        else
          color-print 3 "Push changes failed."
          exit 1
        fi
      fi
    else
      color-print 0 "There are uncommited files."
      exit 0
    fi
  fi
}

function merge_different_remote_for_same_branch() {
  # Sometimes, the original repo has more or less branches than the fork one.
  # So, in here, you need to specify one.
  if [[ "$source_name" != "$target_name" ]]; then
    color-print 0 "Fetch latest code from $source_name/$branch..."
    git fetch "$source_name" "$branch"
    color-print 0 "Merge the code from $source_name/$branch to $target_name/$branch..."
    git checkout "$branch"
    git merge "$source_name/$branch"
  fi
}

function redirect_branch_to() {
  color-print 0 "Redirect to $1"

  git checkout "$1"
}

function sync_exist_repo() {
  color-print 1 "Redirect to $local_repo_path" && cd "$local_repo_path" || exit 1

  local current_branch
  current_branch="$(current-git-branch)"

  commit_exist_changes

  update_all_branchs

  merge_different_remote_for_same_branch

  redirect_branch_to "$current_branch"

  color-print 1 "Redirect to original folder" && cd - 1>/dev/null 2>&1 || exit 1
}

if [[ $# == 1 && ! -z $1 ]]; then
  local_repo_path=$(realpath "$1")

  if is-git-repo "$local_repo_path"; then
    sync_exist_repo
  elif [[ ! -z $remote_repo_path ]]; then
    git clone "$remote_repo_path" "$local_repo_path"
  else
    color-print 3 "Please provide valid local or remote git repository."
    exit 1
  fi
else
  color-print 3 "Please provide local folder."
  usage
fi
