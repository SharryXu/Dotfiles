#!/usr/bin/env bash

#
# This program is used to backup or restore dot files.
#

###################################
# Declare some constant variables.
###################################
declare -r error_message_check_parameters="Please check parameters."
declare -r default_shell=/usr/local/bin/zsh
declare -r author_name="sxu204"

#########################################################################
# Decide whether this computer is belong to the author or not.
# Globals:
#   whoami
# Arguments:
# Returns:
#   Status Code. (0=Yes, 1=No)
#########################################################################
function is_author_self() {
  if [[ $(whoami) == "$author_name" ]]; then
    return 0
  else
    return 1
  fi
}

######################################
# Declare all used git repositories.
######################################
if is_author_self; then
  declare -r ohmyzsh='git@github.com:SharryXu/oh-my-zsh'
  declare -r spacemacs='git@github.com:SharryXu/spacemacs'
  declare -r iterm2configuration='git@github.com:SharryXu/iTerm2'
  declare -r pyenv='git@github.com:SharryXu/pyenv.git'
else
  declare -r ohmyzsh='https://github.com/SharryXu/oh-my-zsh'
  declare -r spacemacs='https://github.com/SharryXu/spacemacs'
  declare -r iterm2configuration='https://github.com/SharryXu/iTerm2'
  declare -r pyenv='https://github.com/pyenv/pyenv.git'
fi

declare -r zshsyntaxhighlighting='https://github.com/zsh-users/zsh-syntax-highlighting'
declare -r zshcompletions='https://github.com/zsh-users/zsh-completions'
declare -r zshautosuggestions='https://github.com/zsh-users/zsh-autosuggestions'
declare -r powerlinefonts='https://github.com/powerline/fonts'
declare -r nodemanager='https://github.com/creationix/nvm'
declare -r tmuxpluginmanager='https://github.com/tmux-plugins/tpm'
declare -r tmuxpluginyank='https://github.com/tmux-plugins/tmux-yank'
declare -r tmuxpluginsensible='https://github.com/tmux-plugins/tmux-sensible'
declare -r tmuxpluginsidebar='https://github.com/tmux-plugins/tmux-sidebar'
declare -r tmuxpluginprefixhighlight='https://github.com/tmux-plugins/tmux-prefix-highlight'
declare -r youcompleteme='https://github.com/Valloric/ycmd.git'
declare -r clangcomplete='https://github.com/Rip-Rip/clang_complete.git'
declare -r pyenvvirtualenv='https://github.com/pyenv/pyenv-virtualenv.git'

#########################################################################
# Install homebrew tap
# Globals:
#   Homebrew
#   Color-Print
# Arguments:
# Returns:
#   None
#########################################################################
function install_homebrew_tap() {
  if [[ $# == 1 ]]; then
    local exist_homebrew_tap_list
    local target_tap
    local need_install=true
    exist_homebrew_tap_list=$(brew tap)
    target_tap="$1"

    color-print 0 "Check homebrew tap $target_tap..."
    for exist_tap in $exist_homebrew_tap_list; do
      if [[ "$exist_tap" == "$target_tap" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      brew tap "$target_tap"
      color-print 1 "$target_tap has been successfully added."
    else
      color-print 2 "$target_tap has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#########################################################################
# Install all homebrew tap
# Globals:
#   Homebrew
#   Color-Print
# Arguments:
# Returns:
#   None
#########################################################################
function configure_all_homebrew_tap() {
  local target_homebrew_tap_list=(
    'caskroom/cask'
    'caskroom/fonts'
    'homebrew/core'
    'homebrew/php'
    'homebrew/services'
    'omnisharp/omnisharp-roslyn'
  )

  for ((i = 0; i < ${#target_homebrew_tap_list[@]}; i++)); do
    install_homebrew_tap "${target_homebrew_tap_list[i]}"
  done
}

###################################################################################
# Using homebrew tool to install gui packages.
# Globals:
#   homebrew
#   color-print
# Arguments:
#   Cask Package name
# Returns:
#   None
###################################################################################
function install_homebrew_cask_package() {
  if [[ $# == 1 ]]; then
    color-print 0 "Check mac GUI application name $1..."
    local need_install=true

    for exist_cask in $(brew cask list); do
      if [[ $exist_cask == "$1" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      brew cask install "$1"
      color-print 1 "$1 has been successfully installed."
    else
      color-print 2 "$1 has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

######################################
# Configure iTerm2
# Arguments:
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_iTerm2() {
  color-print 0 "Install iterm2..."

  install_homebrew_cask_package 'iterm2'

  sync-git-repo -r $iterm2configuration "$HOME"/.iterm2

  color-print 1 "Please link those sync folder manually in the GUI."
}

######################################
# Install Go language
# Arguments:
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_go_language() {
  color-print 0 "Check go..."
  install_homebrew_package 'go'

  local global_go_folder
  global_go_folder="$HOME"/go

  if [ ! -d "$global_go_folder" ]; then
    mkdir "$global_go_folder"
  fi

  color-print 0 "Install packages for spacemacs go layer..."
  go get -u -v github.com/nsf/gocode
  go get -u -v github.com/rogpeppe/godef
  go get -u -v golang.org/x/tools/cmd/guru
  go get -u -v golang.org/x/tools/cmd/gorename
  go get -u -v golang.org/x/tools/cmd/goimports
  go get -u -v github.com/zmb3/gogetdoc
  go get -u -v github.com/cweill/gotests/...
  go get -u github.com/haya14busa/gopkgs/cmd/gopkgs
  go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct
  go get -u github.com/josharian/impl
	go get -u gopkg.in/alecthomas/gometalinter.v2
	gometalinter.v2 --install --update
	go get -u -v github.com/godoctor/godoctor
	go install github.com/godoctor/godoctor
	go get -u -v github.com/fatih/gomodifytags
	go get -u github.com/sourcegraph/go-langserver
}

#########################################
# Install visual studio code extension.
# Arguments:
#   Command Line Name (Optional)
# Returns:
#   None
#########################################
function install_vscode_extension() {
  if [[ $# == 1 ]]; then
    local exist_extension_list
    local target_extension
    local need_install=true
    exist_extension_list=$(code --list-extensions)
    target_extension="$1"

    color-print 0 "Check visual studio code extension name $target_extension..."
    for exist_extension in $exist_extension_list; do
      if [[ "$exist_extension" == "$target_extension" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      code --install-extension "$target_extension"
      color-print 1 "$target_extension has been successfully installed."
    else
      color-print 2 "$target_extension has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

######################################
# Configure visual studio code
# Returns:
#   None
#######################################
function install_vscode() {
  color-print 0 "Install visual studio code..."

  install_homebrew_cask_package 'visual-studio-code'

  copy-file "$SourcePath"/vscode/settings.json "$HOME"/Library/Application\ Support/Code/User/

  if [ -f "$SourcePath"/vscode/vs-extensions ]; then
    if command -v code 1>/dev/null 2>&1; then
      local extension_list
      extension_list=$(awk '{print $1}' "$SourcePath"/vscode/vs-extensions)

      for extension in $extension_list; do
        install_vscode_extension "$extension"
      done
    else
      color-print 3 "Visual studio code is not installed."
    fi
  fi
}

##################################################################################
# Using npm tool to install packages.
# Globals:
#   npm
#   color-print
# Arguments:
#   Tool Name/Command Line Name
#   Command Line Name (Optional)
# Returns:
#   None
###################################################################################
function install_npm_package() {
  if ! command -v npm 1>/dev/null 2>&1; then
    load-nvm
  fi

  # Warning: Most npm packages need python2.
  if choose_appropriate_python_version '2'; then
    if [[ $# == 1 ]]; then
      local need_install=true
      local package_list
      package_list=$(npm list --global --depth 0 | awk '{ FS="[ @]" }{ print $2 }')

      for exist_package in $package_list; do
        if [[ $exist_package == "$1" ]]; then
          need_install=false
          break
        fi
      done

      if $need_install; then
        color-print 0 "Install latest version for $1..."
        npm install -g "$1@latest"
        color-print 1 "$1 has successfully been installed."
      else
        color-print 2 "$1 has already existed"
      fi
    else
      color-print 3 "Python$2 has not installed."
      exit 1
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

##################################################
# Specific homebrew existed or not.
# Globals:
#   brew
#   color-print
# Arguments:
#   Tool Name
#   Command Line Name (Optional)
# Returns:
#   Code indicate exist or not. (0=exist, 1=no)
##################################################
function is_homebrew_package_exist() {
  if [[ $# == 1 ]]; then
    shopt -s nocasematch

    local existed=false
    for package in $(brew list); do
      if [[ $package == "$1" ]]; then
        existed=true
        break
      fi
    done

    if $existed; then
      return 0;
    else
      return 1;
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}


###################################################################################
# Using homebrew to install tool.
# Globals:
#   brew
#   color-print
# Arguments:
#   Tool Name
#   Command Line Name (Optional)
# Returns:
#   None
###################################################################################
function install_homebrew_package() {
  if [ $# -ge 1 ]; then
    if is_homebrew_package_exist "$1"; then
      color-print 2 "$1 has already existed."
    else
      brew install "$1" "$2"
      color-print 1 "$1 has successfully been installed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

# TODO: Save package list to file and read it when you need
#######################################
# Install ruby packages.
# Globals:
#   gem
#   color-print
# Arguments:
#   Package name
# Returns:
#   None
#######################################
function install_ruby_package() {
  if [ $# -eq 1 ]; then
    local need_install=true

    for package in $(gem list --local --no-version | sed -n '4,$p'); do
      if [[ "$package" == *"$1" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      gem install "$1"
      color-print 1 "Ruby package name $1 has been successfully installed."
    else
      color-print 2 "Ruby package name $1 has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Switch shell's python version.
# Globals:
#   color-print
# Arguments:
#   Major version.
#   Minor version. (Optional)
# Returns:
#   StatusCode. (0=exist, 1=no)
#######################################
function choose_appropriate_python_version() {
  if command -v pyenv 1>/dev/null 2>&1; then
    if is-number "$1"; then
      local majorVer=$1
      local minorVer=$2

      for version in $(pyenv versions --bare); do
        if [[ ($(is-number "$minorVer") && "$version" == "$majorVer.$2."*) || (! $(is-number "$minorVer") && "$version" == "$majorVer."*) ]]; then
          pyenv global "$version"
          color-print 1 "Choose python version $version..."
          return 0
        fi
      done

      return 1
    else
      color-print 3 "Please provide appropriate python version."
      exit 1
    fi
  else
    color-print 3 "Please make sure the pyenv has installed."
    exit 1
  fi
}

#######################################
# Install python packages.
# Globals:
#   pip2,3
#   color-print
# Arguments:
#   Package name
#   Major version (3=pip3, 2=pip2)
#   Minor version (Optional)
# Returns:
#   None
#######################################
function install_python_package() {
  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
  else
    color-print 3 "The program name pyenv is not existed."
    install_homebrew_package 'pyenv'
    exit 1
  fi

  if [[ $# -ge 2 ]]; then
    if choose_appropriate_python_version "$2" "$3"; then
      shopt -s nocasematch

      local need_install=true

      for package in $(pip list | sed -n '3,$p' | awk '{print $1}'); do
        if [[ "$package" == *"$1" ]]; then
          need_install=false
          break
        fi
      done

      if $need_install; then
        #pip install --user "$1"
        pip install --upgrade "$1"
        color-print 1 "Python package name $1 has been successfully installed."
      else
        color-print 2 "Python package name $1 has already existed."
      fi
    else
      color-print 3 "Python$2 has not installed."
      exit 1
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Setup Mac OS Inside parameters.
# Globals:
#   color-print
# Arguments:
#   None
# Returns:
#   None
#######################################
function setup_macos_settings() {
  local default_screenshot_type
  local default_screenshot_location
  default_screenshot_type="jpg"
  default_screenshot_location="$HOME"/Desktop/ScreenShots

  if [[ $(defaults read com.apple.finder _FXShowPosixPathInTitle) == "0" ]]; then
    color-print 0 "Show full file path on the tile in Finder..."
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true && killall Finder
  fi

  # Adjust the delay time for Dock displaying
  if [[ $(defaults read com.apple.dock autohide-delay) != "0" ]]; then
    defaults write com.apple.Dock autohide-delay -float 0 && killall Dock
  fi

  # Adjust the LaunchPad layout
  # defaults write com.apple.dock springboard-columns -int 8
  # defaults write com.apple.dock springboard-rows -int 7
  # Adjust the transpalent value for LaunchPad
  # defaults write com.apple.dock springboard-blur-radius -int 100
  # defaults write com.apple.dock ResetLaunchPad -bool true
  # Adjust the screenshots
  if [[ $(defaults read com.apple.screencapture location) != "$default_screenshot_location" ]]; then
    color-print 0 "Change default screenshot location to $default_screenshot_location..."
    defaults write com.apple.screencapture location "$default_screenshot_location" && killall SystemUIServer
  fi

  if [[ $(defaults read com.apple.screencapture type) != "$default_screenshot_type" ]]; then
    color-print 0 "Change default screenshot type to $default_screenshot_type..."
    defaults write com.apple.screencapture type jpg && killall SystemUIServer
  fi

  # Fix the vim key repeating issue in visual studio code.
  if [[ $(defaults read com.microsoft.VSCode ApplePressAndHoldEnabled) != "0" ]]; then
    defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
  fi
}

#######################################
# Install global configs.
# Globals:
#   sync-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function install_global_config() {
  color-print 0 "Install global Config..."
  sync-folder "$SourcePath"/config/cppman "$HOME"/.config/cppman
  sync-folder "$SourcePath"/config/fontconfig "$HOME"/.config/fontconfig
  sync-folder "$SourcePath"/config/karabiner "$HOME"/.config/karabiner
  sync-folder "$SourcePath"/config/tmuxinator "$HOME"/.config/tmuxinator
}

#######################################
# Backup global configs.
# Globals:
#   sync-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup_global_config() {
  color-print 0 "Backup global Config..."
  sync-folder "$HOME"/.config/cppman "$SourcePath"/config/cppman
  sync-folder "$HOME"/.config/fontconfig "$SourcePath"/config/fontconfig
  sync-folder "$HOME"/.config/karabiner "$SourcePath"/config/karabiner
  sync-folder "$HOME"/.config/tmuxinator "$SourcePath"/config/tmuxinator
}

##################################
# Install homebrew
# Globals:
# Arguments:
#   color-print
# Returns:
#   None
##################################
function install_homebrew() {
  color-print 0 "Check brew..."
  if command -v brew 1>/dev/null 2>&1; then
    brew update
    color-print 1 "brew has been successfully updated."
    color-print 0 "Update all brew packages..."
    brew upgrade
    color-print 1 "All brew packages have been updated."
  else
    if command -v ruby 1>/dev/null 2>&1; then
      color-print 3 "Please install Ruby first."
      exit 1
    else
      ruby "$SourcePath/brew/brew_install"
      color-print 1 "brew has been successfully installed."
    fi
  fi
}

###################################
# Configure haskell environment
# Globals:
# Arguments:
#   color-print
#   curl
# Returns:
#   None
###################################
function configure_haskell() {
  color-print 0 "Check Haskell environment..."

  if ! command -v stack 1>/dev/null 2>&1; then
    curl -sSL https://get.haskellstack.org/ | sh
  fi
}

###################################
# Configure bash
# Globals:
# Arguments:
#   install_homebrew_package
#   color-print
#   copy-file
# Returns:
#   None
###################################
function configure_bash() {
  color-print 0 "Check bash..."
  install_homebrew_package 'bash'

  copy-file -V "$SourcePath"/bash/bash_profile "$HOME"
  copy-file -V "$SourcePath"/bash/profile "$HOME"
  copy-file -V "$SourcePath"/bash/bashrc "$HOME"
  copy-file -V "$SourcePath"/bash/fzf.bash "$HOME"

  /bin/bash "$HOME"/.bashrc
}

###################################
# Configure zsh and oh-my-zsh
# Globals:
# Arguments:
#   install_homebrew_package
#   chsh
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_zsh() {
  color-print 0 "Check zsh..."
  install_homebrew_package 'zsh'

  color-print 0 "Check default shell to zsh..."
  if [[ $SHELL != "$default_shell" ]]; then
    sudo chsh -s $default_shell
  fi

  color-print 0 "Check oh-My-Zsh..."
  sync-git-repo -r $ohmyzsh -b master -s author -t origin "$HOME"/.oh-my-zsh

  copy-file -V "$SourcePath"/zsh/zshrc "$HOME"
  copy-file -V "$SourcePath"/zsh/zshenv "$HOME"

  color-print 0 "Check custom plugins for Oh-My-Zsh..."
  sync-git-repo -u -r "$zshsyntaxhighlighting" "$HOME"/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  sync-git-repo -u -r "$zshcompletions" "$HOME"/.oh-my-zsh/custom/plugins/zsh-completions
  sync-git-repo -u -r "$zshautosuggestions" "$HOME"/.oh-my-zsh/custom/plugins/zsh-autosuggestions

  color-print 0 "Clean exist completion dump files..."
  rm -rf "$HOME"/.zcompdump*

  color-print 0 "Check fzf tool..."
  install_homebrew_package 'fzf'
  copy-file -V "$SourcePath"/zsh/fzf.zsh "$HOME"

  install_homebrew_package 'autojump'
}

###################################
# Configure tmux
# Globals:
# Arguments:
#   install_homebrew_package
#   install_ruby_package
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_tmux() {
  color-print 0 "Check tmux tool..."
  install_homebrew_package 'tmux'
  install_ruby_package 'tmuxinator'
  copy-file -V "$SourcePath"/other/tmux.conf "$HOME"

  color-print 0 "Check related tmux plugins..."
  install_homebrew_package 'reattach-to-user-namespace'
  sync-git-repo -u -r "$tmuxpluginmanager" "$HOME"/.tmux/plugins/tpm
  sync-git-repo -u -r "$tmuxpluginyank" "$HOME"/.tmux/plugins/tmux-yank
  sync-git-repo -u -r "$tmuxpluginsensible" "$HOME"/.tmux/plugins/tmux-sensible
  sync-git-repo -u -r "$tmuxpluginsidebar" "$HOME"/.tmux/plugins/tmux-sidebar
  sync-git-repo -u -r "$tmuxpluginprefixhighlight" "$HOME"/.tmux/plugins/tmux-prefix-highlight
}

###################################
# Configure emacs
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_emacs() {
  # config emacs (substitute the default emacs installed by Mac OS)
  color-print 0 "Check emacs..."
  install_homebrew_package 'cmake'
	install_homebrew_package 'llvm' '--with-libcxx --with-clang --with-toolchain --with-lldb --without-assertions --with-rtti'
  install_homebrew_package 'emacs' '--with-cocoa --with-modules' # --HEAD
  sync-git-repo -r $spacemacs -b develop -s author -t origin "$HOME"/.emacs.d

  copy-file -V "$SourcePath"/emacs/spacemacs "$HOME"

  # Remove this file to avoid the strange characters in the Spacemacs' terminal mode.
  if [ -f "$HOME/.iterm2_shell_integration.zsh" ]; then
    rm "$HOME"/.iterm2_shell_integration.zsh
  fi

  install_npm_package 'ymd'
  install_homebrew_package 'cppcheck'
  install_homebrew_package 'shellcheck'
  install_homebrew_package 'tidy-html5'
  install_npm_package 'stylelint'
  install_npm_package 'eslint'
  install_npm_package 'jshint'
  install_npm_package 'jsonlint'
  install_npm_package 'csslint'
  install_homebrew_package 'markdown'
  install_homebrew_package 'chicken'
  install_npm_package 'typescript'
  install_npm_package 'javascript-typescript-langserver'
  install_npm_package 'flow-language-server'
  install_npm_package 'typescript-language-server'
	install_python_package 'wakatime' '3'

  # For pdf-tools
	install_homebrew_package 'automake'
	install_homebrew_package 'autoconf'
  install_homebrew_package 'zlib'
  install_homebrew_package 'poppler' "--with-qt"

	# For dash layer.
	install_homebrew_package 'sqlite' '--with-functions'

	# For python layer.
	install_python_package 'jedi' '3'
	install_python_package 'json-rpc' '3'
	install_python_package 'service_factory' '3'
	install_python_package 'flake8' '3'
	install_python_package 'autoflake' '3'

  if $New_System; then
    chicken-install -s apropos chicken-doc
    (
      cd "$(csi -p '(chicken-home)')" || exit 1
      curl https://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx
    )
  fi

  install_python_package 'importmagic' '3'
  install_python_package 'epc' '3'

  color-print 0 "Check ycmd..."
	install_python_package 'requests' '3'
  sync-git-repo -m -u -r $youcompleteme "$HOME"/.ycmd
  if is-git-repo-unpushed "$HOME"/.ycmd; then
		choose_appropriate_python_version '3'
    python "$HOME"/.ycmd/build.py --clang-completer --system-libclang
  fi

  sync-git-repo -u -r $clangcomplete "$HOME"/.clang-complete

  copy-file -V "$SourcePath"/other/jsbeautifyrc "$HOME"
  copy-file -V "$SourcePath"/other/jshintrc "$HOME"
  copy-file -V "$SourcePath"/other/tern-config "$HOME"

  copy-file -V "$SourcePath"/emacs/ycm_global_conf.py "$HOME"
  copy-file -V "$SourcePath"/emacs/diredful-conf.el "$HOME"
}

###################################
# Configure vim
# Globals:
# Arguments:
#   install_homebrew_package
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_vim() {
  color-print 0 "Check Vim..."
  install_homebrew_package 'vim'
  install_homebrew_package 'neovim'
}

###################################
# Install fonts
# Globals:
# Arguments:
#   color-print
#   sync-git-repo
# Returns:
#   None
###################################
function install_fonts() {
  #color-print 0 "Check Nerd fonts..."
  #install_homebrew_cask_package 'font-hack-nerd-font'

  color-print 0 "Check Powerline fonts..."
  sync-git-repo -u -r $powerlinefonts "$HOME"/.fonts-powerline
  "$HOME"/.fonts-powerline/install.sh 1> /dev/null
}

###################################
# Configure Git
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   color-print
#   copy-file
# Returns:
#   None
###################################
function configure_git() {
  color-print 0 "Check git..."
  install_homebrew_package 'git'
  install_homebrew_package 'tig'
  install_homebrew_package 'diff-so-fancy'

  copy-file -V "$SourcePath"/git/gitconfig "$HOME"/
  copy-file -V "$SourcePath"/git/gitignore_global "$HOME"/

  # install_python_package 'gitsome' '3'
}

###################################
# Install different python versions.
# Globals:
# Arguments:
#   pyenv
#   color-print
# Returns:
#   None
###################################
function install_python_versions() {
  if command -v pyenv 1>/dev/null 2>&1; then
    # TODO: Remember to upgrade version when gitsome can work properly under 3.6.5
    local target_python_versions=(
      '2.7.14'
      '3.6.5'
    )

    local exist_python_versions
    exist_python_versions=$(pyenv versions --bare)
    local need_install=true

    for ((i = 0; i < ${#target_python_versions[@]}; i++)); do
      target_version=${target_python_versions[i]}
      color-print 0 "Check python version $target_version existed or not..."
      for exist_version in $exist_python_versions; do
        if [[ $exist_version == "$target_version" ]]; then
          need_install=false
          break
        fi
      done

      if $need_install; then
        pyenv install "$target_version"
        color-print 1 "$target_version has been successfully installed."
      else
        color-print 2 "$target_version has already existed."
      fi
    done
  else
    color-print 3 "Please install pyenv first."
    exit 1
  fi
}

###################################
# Configure Python
# Globals:
# Arguments:
#   install_homebrew_package
#   color-print
# Returns:
#   None
###################################
function configure_python() {
  color-print 0 "Check python..."
  sync-git-repo -u -r $pyenv "$HOME"/.pyenv
  sync-git-repo -u -r $pyenvvirtualenv "$HOME"/.pyenv/plugins/pyenv-virtualenv

  install_python_versions

  # TODO: Refactor choose_appropriate_python_version so that its parameter can accept format like 2.3.0
  choose_appropriate_python_version '2'
  color-print 0 "Update pip2..."
  pip install --upgrade pip

  choose_appropriate_python_version '3'
  color-print 0 "Update pip3..."
  pip install --upgrade pip
}

###################################
# Configure Node
# Globals:
# Arguments:
#   color-print
# Returns:
#   None
###################################
function configure_node() {
  color-print 0 "Check NodeJS and node package manager..."

  sync-git-repo -u -r $nodemanager "$HOME"/.nvm

  source "$HOME"/.nvm/nvm.sh

  install_node_versions

  copy-file -V "$SourcePath"/other/npmrc "$HOME"

  #color-print 0 "Update npm..."
  #npm install npm@latest -g
}

###################################
# Install different node versions.
# Globals:
# Arguments:
#   nvm
#   color-print
# Returns:
#   None
###################################
function install_node_versions() {
  if nvm --version 2>/dev/null 1>&2; then
    local target_node_versions=(
      '10.15.1'
    )

    local exist_node_versions
    exist_node_versions=$(ls "$HOME"/.nvm/versions/node)
    local need_install=true

    for ((i = 0; i < ${#target_node_versions[@]}; i++)); do
      target_version=${target_node_versions[i]}
      color-print 0 "Check node version $target_version existed or not..."
      for exist_version in $exist_node_versions; do
        if [[ "$exist_version" == "v$target_version" ]]; then
          need_install=false
          break
        fi
      done

      if $need_install; then
        nvm install "$target_version"
        color-print 1 "$target_version has been successfully installed."
      else
        color-print 2 "$target_version has already existed."
      fi
    done
  elif function-exist load-nvm; then
    load-nvm && install_node_versions
  else
    color-print 3 "Please install node version manager first."
    exit 1
  fi
}

###################################
# Install mac GUI applications.
# Globals:
# Arguments:
#   color-print
# Returns:
#   None
###################################
function install_mac_gui_programs() {
  color-print 0 "Upgrade all existed GUI programs..."
  brew cask upgrade

  local gui_programs=(
    'adobe-acrobat-reader'
    'dash'
    'sourcetree'
    'karabiner'
    'karabiner-elements'
    'docker'
    'kindle'
    'mysqlworkbench'
    'gitter'
    'postman'
    'neteasemusic'
    'wireshark'
    'xmind'
    'cheatsheet'
    'microsoft-azure-storage-explorer'
    'appcleaner'
    'intellij-idea-ce'
		'pycharm-ce'
		'sequel-pro'
		'shadowsocksx-ng'
		'typora'
		'wechat'
		'iterm2'
		'postman'
		'youdaodict'
  )

  for ((i = 0; i < ${#gui_programs[@]}; i++)); do
    install_homebrew_cask_package "${gui_programs[i]}"
  done
}

#############################
# Install custom commands.
# Globals:
#   rsync
# Arguments:
#   None
# Returns:
#   None
#############################
function install_custom_commands() {
  if [ ! -d "$HOME"/.bin ]; then
    mkdir "$HOME"/.bin
  fi

  rsync -avz --delete "$SourcePath"/bin/ "$HOME"/.bin

  # Make all files executable
  for i in "$HOME"/.bin/*; do
    chmod +x "$i"
  done
}

############################
# Backup custom commands.
# Globals:
#   rsync
# Arguments:
#   None
# Returns:
#   None
############################
function backup_custom_commands() {
  if [ ! -d "$HOME"/.bin ]; then
    mkdir "$HOME"/.bin
  fi

  rsync -avz --delete "$HOME"/.bin/ "$SourcePath"/bin

  # Make all files executable
  for i in "$SourcePath"/bin/*; do
    chmod +x "$i"
  done
}

#######################################
# Install tools and settings.
# Globals:
# Arguments:
#   None
# Returns:
#   None
#######################################
function install() {
  install_custom_commands

  install_homebrew

  configure_bash

  color-print 0 "Check Ruby..."
  install_homebrew_package 'ruby'

  configure_tmux

  configure_zsh

  configure_python

  configure_node

  configure_all_homebrew_tap

  color-print 0 "Check xcode tool chain..."
  if ! xcode-select -p 1>/dev/null 2>&1; then
    xcode-select --install
  else
    color-print 2 "xcode tool chain has already been installed."
  fi

  configure_git

  configure_haskell

  configure_emacs

  configure_vim

  color-print 0 "Setup Mac OS..."
  setup_macos_settings

  color-print 0 "Check mongo database..."
  install_homebrew_package 'mongodb'
  copy-file -V "$SourcePath/mongodb/mongorc.js" "$HOME"

  color-print 0 "Check MySQL database..."
  install_homebrew_package 'mysql'
  install_homebrew_package 'mycli'
  copy-file -V "$SourcePath"/mysql/my.cnf "$HOME"

  color-print 0 "Check tree tool..."
  install_homebrew_package 'tree'

  color-print 0 "Check download accelerate tool..."
  install_homebrew_package 'axel'

  color-print 0 "Check Microsoft SQL Server tool..."
  install_python_package 'wheel' '3'
  install_python_package 'mssql-cli' '3'

  color-print 0 "Check gdb gui tool..."
  install_python_package 'gdbgui' '3'

  color-print 0 "Check cppman tool..."
  install_python_package 'cppman' '3'

  install_go_language

  #color-print 0 "Check github language analysis tool..."
  #install_ruby_package 'github-linguist'

  color-print 0 "Check python format tool..."
  install_python_package 'yapf' '3'

  color-print 0 "Check disk usage tool..."
  install_homebrew_package 'ncdu'

  color-print 0 "Check static code analysis tool..."
  install_homebrew_package 'cloc'

  color-print 0 "Check live-stream video download tool..."
  install_homebrew_package 'you-get'

  install_iTerm2

  install_mac_gui_programs

  install_vscode

  install_fonts

  color-print 0 "Check ClangFormat tool..."
  install_homebrew_package 'clang-format'
  copy-file -V "$SourcePath"/other/clang-format "$HOME"
  copy-file -V "$SourcePath"/other/clang_complete "$HOME"

  color-print 0 "Check system monitor tool..."
  # install_homebrew_package 'htop'
  install_python_package 'glances' '3'

  color-print 0 "Check chez-scheme..."
  install_homebrew_package 'chezscheme'

  color-print 0 "Check hexo..."
  install_npm_package 'hexo-cli'

  color-print 0 "Check Javascript analyzer..."
  install_npm_package 'tern'

  color-print 0 "Check travis..."
  install_ruby_package 'travis'

  color-print 0 "Check WakaTime tool..."
  copy-file -V "$SourcePath"/other/wakatime.cfg "$HOME"

  install_global_config

  choose_appropriate_python_version '3'

  color-print 1 "Done." && say --quality=127 "Install done."
}

#######################################
# Backup settings.
# Globals:
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup() {
  backup_custom_commands

  color-print 0 "Backup zsh and bash file..."
  copy-file -v "$HOME"/.zshrc "$SourcePath"/zsh/
  copy-file -v "$HOME"/.zshenv "$SourcePath"/zsh/
  copy-file -v "$HOME"/.bash_profile "$SourcePath"/bash/
  copy-file -v "$HOME"/.profile "$SourcePath"/bash/
  copy-file -v "$HOME"/.bashrc "$SourcePath"/bash/
  copy-file -v "$HOME"/.fzf.bash "$SourcePath"/bash/
  copy-file -v "$HOME"/.fzf.zsh "$SourcePath"/zsh/

  color-print 0 "Backup emacs..."
  copy-file -v "$HOME"/.spacemacs "$SourcePath"/emacs/
  copy-file -v "$HOME"/.diredful-conf.el "$SourcePath"/emacs/
  copy-file -v "$HOME"/.ycm_global_conf.py "$SourcePath"/emacs/

  color-print 0 "Backup mongo database..."
  copy-file -v "$HOME"/.mongorc.js "$SourcePath"/mongodb/
  # TODO: backup mongo.conf file.

  color-print 0 "Backup mysql database..."
  copy-file -v "$HOME"/.my.cnf "$SourcePath"/mysql/

  color-print 0 "Backup clang related settings..."
  copy-file -v "$HOME"/.clang-format "$SourcePath"/other/
  copy-file -v "$HOME"/.clang_complete "$SourcePath"/other/

  color-print 0 "Backup tmux tool's configuration..."
  copy-file -v "$HOME"/.tmux.conf "$SourcePath"/other/

  backup_global_config

  color-print 0 "Backup Git Configuration..."
  copy-file -v "$HOME"/.gitconfig "$SourcePath"/git/
  copy-file -v "$HOME"/.gitignore_global "$SourcePath"/git/

  color-print 0 "Backup WakaTime Config..."
  copy-file -v "$HOME/.wakatime.cfg" "$SourcePath"/other/

  color-print 0 "Backup npm config..."
  copy-file -v "$HOME"/.npmrc "$SourcePath"/other/
  copy-file -v "$HOME"/.jsbeautifyrc "$SourcePath"/other/
  copy-file -v "$HOME"/.jshintrc "$SourcePath"/other/
  copy-file -v "$HOME"/.tern-config "$SourcePath"/other/

  color-print 0 "Backup vs code settings..."
  copy-file "$HOME/Library/Application Support/Code/User/settings.json" "$SourcePath"/vscode/
  if command -v code 1>/dev/null 2>&1; then
    code --list-extensions > "$SourcePath"/vscode/vs-extensions
  fi

  # Redirect to the Source folder to show difference
  git --git-dir="$SourcePath"/.git --work-tree="$SourcePath" diff --word-diff

  sync-git-repo "$SourcePath"

  color-print 1 "Done." && say --quality=127 "Backup done."
}

#######################################
# Check source path is valid or not.
# Globals:
# Arguments:
#   realpath
#   color-print
#   is-folder-empty
# Returns:
#   Status code represent valid or not.
#######################################
function check_source_path() {
  if ! SourcePath=$(realpath "$SourcePath" 2>/dev/null) || [ ! -d "$SourcePath" ]; then
    return 1
  else
    return 0
  fi
}

function usage () {
  echo -e "usage: $(basename "$0") [options] [source_folder_path]

[options]:
-i  install dotfiles to this machine.
-b  backup dotfiles.
-u  update dotfiles.
-a  backup first and update later.
-p  print source folder's structure.
-n  indicate this machine has a new OS.
-h  show help information."

  exit 1
}

Install_Dotfiles=false
Backup_Dotfiles=false
BackupAndUpdate_Dotfiles=false
Print_Structure=false
New_System=false

while getopts "abipuh" option; do
  case $option in
    a)BackupAndUpdate_Dotfiles=true;;
    b)Backup_Dotfiles=true;;
    i)Install_Dotfiles=true
      New_System=true;;
    u)Install_Dotfiles=true;;
    p)Print_Structure=true;;
    h|*)usage;;
  esac
done

shift $((OPTIND-1))

if [ -z "$1" ]; then
  SourcePath=$DOTFILES_PATH
else
  SourcePath=$1
fi

PATH="$SourcePath"/bin:$PATH

# set -e

if $Install_Dotfiles; then
  if check_source_path; then
    install
  fi
elif $Backup_Dotfiles; then
  if check_source_path; then
    backup
  fi
elif $BackupAndUpdate_Dotfiles; then
  if check_source_path; then
    backup
    install
  fi
elif $Print_Structure; then
  tree -C "$SourcePath"
else
  usage
fi
