#!/usr/bin/env bash
#
# This program is used to backup or restore dot files.
#

###################################
# Declare some constant variables.
###################################
declare -r error_message_check_parameters="Please check parameters."
declare -r default_shell=/usr/local/bin/zsh

################################
# Declare some global variables
################################
declare user_password=''

######################################
# Declare all used git repositories.
######################################
declare -r ohmyzsh='git@github.com:SharryXu/oh-my-zsh'
declare -r zshsyntaxhighlighting='https://github.com/zsh-users/zsh-syntax-highlighting'
declare -r zshcompletions='https://github.com/zsh-users/zsh-completions'
declare -r zshautosuggestions='https://github.com/zsh-users/zsh-autosuggestions'
declare -r spacemacs='git@github.com:SharryXu/spacemacs'
declare -r powerlinefonts='https://github.com/powerline/fonts'
declare -r nodemanager='https://github.com/creationix/nvm'
declare -r tmuxpluginmanager='https://github.com/tmux-plugins/tpm'
declare -r tmuxpluginyank='https://github.com/tmux-plugins/tmux-yank'
declare -r tmuxpluginsensible='https://github.com/tmux-plugins/tmux-sensible'
declare -r tmuxpluginsidebar='https://github.com/tmux-plugins/tmux-sidebar'
declare -r tmuxpluginprefixhighlight='https://github.com/tmux-plugins/tmux-prefix-highlight'
declare -r iterm2configuration='git@github.com:SharryXu/iTerm2'

#############################
# Install all homebrew tap
# Globals:
#   Homebrew
#   Color-Print
# Arguments:
# Returns:
#   None
#############################
function configure_homebrew_tap() {
  ###########################
  # homebrew tap list
  ###########################
  local target_homebrew_tap_list=(
    'caskroom/cask'
    'caskroom/fonts'
    'd12frosted/emacs-plus'
    'homebrew/core'
    'homebrew/php'
    'homebrew/services'
    'omnisharp/omnisharp-roslyn'
  )

  local exist_homebrew_tap_list
  exist_homebrew_tap_list=$(brew tap)
  local need_install=true

  for ((i = 0; i < ${#target_homebrew_tap_list[@]}; i++)); do
    target_tap=${target_homebrew_tap_list[i]}
    color-print 0 "Check homebrew tap $target_tap..."
    for exist_tap in $exist_homebrew_tap_list; do
      if [[ "$exist_tap" == "$target_tap" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      brew tap "$target_tap"
      color-print 1 "$target_tap has been successfully added."
    else
      color-print 2 "$target_tap has already existed."
    fi
  done
}

#######################################
# Using homebrew tool to install gui packages.
# Globals:
#   homebrew
#   color-print
# Arguments:
#   Cask Package name
# Returns:
#   None
#######################################
function install_homebrew_cask_package() {
  if [[ $# == 1 ]]; then
    color-print 0 "Check mac GUI application name $1..."
    local need_install=true

    for exist_cask in $(brew cask list); do
      if [[ $exist_cask == "$1" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      brew cask install "$1"
      color-print 1 "$1 has been successfully installed."
    else
      color-print 2 "$1 has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

######################################
# Configure iTerm2
# Arguments:
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_iTerm2() {
  color-print 0 "Install iterm2..."

  install_homebrew_cask_package 'iterm2'

  sync-git-repo -r $iterm2configuration "$HOME/.iterm2"

  color-print 1 "Please link those sync folder manually in the GUI."
}


######################################
# Using npm tool to install packages.
# Globals:
#   command-exist
#   npm
#   color-print
# Arguments:
#   Tool Name/Command Line Name
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_npm_package() {
  if ! command-exist npm; then
    load-nvm
  fi

  #TODO: Converge all npm packages in one place.
  # Warning: Most npm packages need python2.
  choose_appropriate_python_version '2'

  if [[ $# == 1 ]]; then
    local need_install=true

    for exist_package in $(color-print-npm-packages); do
      if [[ $exist_package == "$1" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      color-print 0 "Install latest version for $1..."
      npm install -g "$1@latest"
      color-print 1 "$1 has successfully been installed."
    else
      color-print 2 "$1 has already existed"
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Using homebrew to install tool.
# Globals:
#   brew
#   command-exist
#   color-print
# Arguments:
#   Tool Name
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_homebrew_package() {
  if [[ $# == 1 ]]; then
    shopt -s nocasematch
    local need_install=true
    for package in $(brew list); do
      if [[ $package == "$1" ]]; then
        need_install=false
      fi
    done

    if $need_install; then
      brew install "$1"
      color-print 1 "$1 has successfully been installed."
    else
      color-print 2 "$1 has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

# TODO: Save package list to file and read it when you need
#######################################
# Install ruby packages.
# Globals:
#   gem
#   color-print
# Arguments:
#   Package name
# Returns:
#   None
#######################################
function install_ruby_package() {
  if [ $# -eq 1 ]; then
    local need_install=true

    for package in $(gem list --local --no-version | sed -n '4,$p'); do
      if [[ "$package" == *"$1" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      # TODO: Need root permission to write /Library/Ruby/Gems/2.0.0.
      gem install "$1"
      color-print 1 "Ruby package name $1 has been successfully installed."
    else
      color-print 2 "Ruby package name $1 has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Swtich shell's python version.
# Globals:
#   color-print
# Arguments:
#   Major version.
#   Minor version. (Optional)
# Returns:
#   None
#######################################
function choose_appropriate_python_version() {
  if [[ ($# -ge 1) && ($# -lt 3) && $(command-exist pyenv) && $(is-number "$1") ]]; then
    local set=1
    local majorVer=$1
    local minorVer=$2

    for version in $(pyenv versions --bare); do
      if [[ ($(is-number "$minorVer") && "$version" == "$majorVer.$2."*) || (! $(is-number "$minorVer") && "$version" == "$majorVer."*) ]]; then
        set=0
        pyenv shell "$version"
      fi
    done

    if ! $set; then
      color-print 3 "Please provide appropriate python version."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Install python packages.
# Globals:
#   pip2,3
#   color-print
# Arguments:
#   Package name
#   Major version (3=pip3, 2=pip2)
#   Minor version (Optional)
# Returns:
#   None
#######################################
function install_python_package() {
  if command-exist 'pyenv'; then
    eval "$(pyenv init -)"
  else
    color-print 3 "The program name pyenv is not existed."
    install_homebrew_package 'pyenv'
    exit 1
  fi

  if [[ $# -ge 2 ]]; then
    choose_appropriate_python_version "$2" "$3"

    shopt -s nocasematch

    local need_install=true

    for package in $("pip$2" list --format=columns | sed -n '3,$p'); do
      if [[ "$package" == *"$1" ]]; then
        need_install=false
        break
      fi
    done

    if $need_install; then
      "pip$2" install --user "$1"
      color-print 1 "Python package name $1 has been successfully installed."
    else
      color-print 2 "Python package name $1 has already existed."
    fi
  else
    color-print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Setup Mac OS Inside parameters.
# Globals:
#   color-print
# Arguments:
#   None
# Returns:
#   None
#######################################
function setup_macos_settings() {
  color-print 0 "Show full file path on the tile in Finder..."
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true && killall Finder
  # Adjust the delay time for Dock displaying
  defaults write com.apple.Dock autohide-delay -float 0
  # Adjust the LaunchPad layout
  # defaults write com.apple.dock springboard-columns -int 8
  # defaults write com.apple.dock springboard-rows -int 7
  # Adjust the transpalent value for LaunchPad
  # defaults write com.apple.dock springboard-blur-radius -int 100
  # defaults write com.apple.dock ResetLaunchPad -bool true
  # Adjust the default location for screenshots
  # defaults write com.apple.screencapture location ~/Desktop/screenshots; killall SystemUIServer
  # Adjust the default screenshot type
  # defaults write com.apple.screencapture type jpg && killall SystemUIServer
  killall Dock
}

#######################################
# Install custom commands.
# Globals:
#   copy-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function install_custom_commands() {
  color-print 0 "Create custom programs..."

  if [ ! -d "$HOME/.bin" ]; then
    mkdir "$HOME/.bin"
  fi

  sync-folder -s "$user_password" "$SourcePath/bin" "$HOME/.bin"

  # Make all files executable
  for i in $HOME/.bin/*; do
    chmod +x "$i"
  done
}

#######################################
# Install global configs.
# Globals:
#   sync-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function install_global_config() {
  color-print 0 "Install global Config..."
  sync-folder -s "$user_password" "$SourcePath/config/cppman" "$HOME/.config/cppman"
  sync-folder -s "$user_password" "$SourcePath/config/fontconfig" "$HOME/.config/fontconfig"
  sync-folder -s "$user_password" "$SourcePath/config/karabiner" "$HOME/.config/karabiner"
  copy-file "$SourcePath/config/nvim/init.vim" "$HOME/.config/nvim"
  sync-folder -s "$user_password" "$SourcePath/config/tmuxinator" "$HOME/.config/tmuxinator"
}

#######################################
# Backup custom commands.
# Globals:
#   copy-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup_custom_commands() {
  color-print 0 "Backup custom programs..."
  sync-folder -s "$user_password" "$HOME/.bin" "$SourcePath/bin"

  # Make all files executable
  for i in $SourcePath/bin/*; do
    chmod +x "$i"
  done
}

#######################################
# Backup global configs.
# Globals:
#   sync-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup_global_config() {
  color-print 0 "Backup global Config..."
  sync-folder -s "$user_password" "$HOME/.config/cppman" "$SourcePath/config/cppman"
  sync-folder -s "$user_password" "$HOME/.config/fontconfig" "$SourcePath/config/fontconfig"
  sync-folder -s "$user_password" "$HOME/.config/karabiner" "$SourcePath/config/karabiner"
  copy-file "$HOME/.config/nvim/init.vim" "$SourcePath/config/nvim"
  sync-folder -s "$user_password" "$HOME/.config/tmuxinator" "$SourcePath/config/tmuxinator"
}

##################################
# Install homebrew
# Globals:
# Arguments:
#   command-exist
#   color-print
# Returns:
#   None
##################################
function install_homebrew() {
  color-print 0 "Check brew..."
  if command-exist 'brew'; then
    brew update
    color-print 1 "brew has been successfully updated."
    color-print 0 "Update all brew packages..."
    brew upgrade
    color-print 1 "All brew packages have been updated."
  else
    if command-exist 'ruby'; then
      color-print 3 "Please install Ruby first."
      exit 1
    else
      ruby "$SourcePath/brew/brew_install"
      color-print 1 "brew has been successfully installed."
    fi
  fi
}

###################################
# Configure haskell environment
# Globals:
# Arguments:
#   color-print
#   curl
# Returns:
#   None
###################################
function configure_haskell() {
  color-print 0 "Check Haskell environment..."

  if ! command-exist stack; then
    curl -sSL https://get.haskellstack.org/ | sh
  fi
}

###################################
# Configure zsh and oh-my-zsh
# Globals:
# Arguments:
#   install_homebrew_package
#   chsh
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_zsh() {
  color-print 0 "Check zsh..."
  install_homebrew_package 'zsh'

  color-print 0 "Check default shell to zsh..."
  if [[ $SHELL != "$default_shell" ]]; then
    echo $user_password | sudo -S chsh -s $default_shell
  fi

  color-print 0 "Check oh-My-Zsh..."
  sync-git-repo -r "$ohmyzsh" "$HOME/.oh-my-zsh/"
  copy-file "$SourcePath/zsh/.zshrc" "$HOME"

  color-print 0 "Check custom plugins for Oh-My-Zsh..."
  sync-git-repo -r "$zshsyntaxhighlighting" "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
  sync-git-repo -r "$zshcompletions" "$HOME/.oh-my-zsh/custom/plugins/zsh-completions"
  sync-git-repo -r "$zshautosuggestions" "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

  color-print 0 "Clean exist completion dump files..."
  rm -rf "$HOME"/.zcompdump*

  color-print 0 "Check fzf tool..."
  install_homebrew_package 'fzf'
  copy-file "$SourcePath"/zsh/.fzf.zsh "$HOME"
  copy-file "$SourcePath"/bash/.fzf.bash "$HOME"
}

###################################
# Configure tmux
# Globals:
# Arguments:
#   install_homebrew_package
#   install_ruby_package
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_tmux() {
  color-print 0 "Check tmux tool..."
  install_homebrew_package 'tmux'
  install_ruby_package 'tmuxinator'
  copy-file "$SourcePath"/other/.tmux.conf "$HOME"

  color-print 0 "Check related tmux plugins..."
  install_homebrew_package 'reattach-to-user-namespace'
  sync-git-repo -r "$tmuxpluginmanager" "$HOME"/.tmux/plugins/tpm
  sync-git-repo -r "$tmuxpluginyank" "$HOME"/.tmux/plugins/tmux-yank
  sync-git-repo -r "$tmuxpluginsensible" "$HOME"/.tmux/plugins/tmux-sensible
  sync-git-repo -r "$tmuxpluginsidebar" "$HOME"/.tmux/plugins/tmux-sidebar
  sync-git-repo -r "$tmuxpluginprefixhighlight" "$HOME"/.tmux/plugins/tmux-prefix-highlight
}

###################################
# Configure emacs
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_emacs() {
  # config emacs (substitute the default emacs installed by Mac OS)
  color-print 0 "Check emacs..."
  install_homebrew_package 'ag'
  install_homebrew_package 'emacs-plus'
  sync-git-repo -r $spacemacs -b develop -s author -t origin "$HOME"/.emacs.d
  copy-file "$SourcePath"/emacs/.spacemacs "$HOME"

  # Remove this file to avoid the strange characters in the Spacemacs' terminal mode.
  if [ -f "$HOME/.iterm2_shell_integration.zsh" ]; then
    rm "$HOME"/.iterm2_shell_integration.zsh
  fi

  install_npm_package 'wakatime'
  install_homebrew_package 'cppcheck'
  install_python_package 'importmagic' '3'
  install_python_package 'epc' '3'
}

###################################
# Configure vim
# Globals:
# Arguments:
#   install_homebrew_package
#   color-print
#   copy-file
#   sync-git-repo
# Returns:
#   None
###################################
function configure_vim() {
  color-print 0 "Check Vim..."
  install_homebrew_package 'vim'
  install_homebrew_package 'neovim'

  # Configure SpaceVim
  if [ ! -d "$HOME"/.Spacevim ]; then
    curl -sLf https://spacevim.org/install.sh | bash
  fi
  copy-file "$SourcePath"/vim/* "$HOME"/.Spacevim.d/
}

###################################
# Install fonts
# Globals:
# Arguments:
#   color-print
#   sync-git-repo
# Returns:
#   None
###################################
function install_fonts() {
  color-print 0 "Check Nerd fonts..."
  install_homebrew_cask_package 'font-hack-nerd-font'

  color-print 0 "Check Powerline fonts..."
  sync-git-repo -r $powerlinefonts "$HOME"/.fonts-powerline
  "$HOME"/.fonts-powerline/install.sh 1> /dev/null
}

###################################
# Configure Git
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   color-print
#   copy-file
# Returns:
#   None
###################################
function configure_git() {
  color-print 0 "Check git..."
  install_homebrew_package 'git'
  install_homebrew_package 'tig'
  copy-file "$SourcePath"/git/.gitconfig "$HOME"/
  copy-file "$SourcePath"/git/.gitignore_global "$HOME"/
  install_python_package 'gitsome' '3'
}

###################################
# Install different python versions.
# Globals:
# Arguments:
#   pyenv
#   color-print
# Returns:
#   None
###################################
function install_python_versions() {
  if command-exist pyenv; then
    local target_python_versions=(
      '2.7.14'
      '3.5.4'
    )

    local exist_python_versions
    exist_python_versions=$(pyenv versions --bare)
    local need_install=true

    for ((i = 0; i < ${#target_python_versions[@]}; i++)); do
      target_version=${target_python_versions[i]}
      color-print 0 "Check python version $target_version existed or not..."
      for exist_version in $exist_python_versions; do
        if [[ $exist_version == "$target_version" ]]; then
          need_install=false
          break
        fi
      done

      if $need_install; then
        pyenv install "$target_version"
        color-print 1 "$target_version has been successfully installed."
      else
        color-print 2 "$target_version has already existed."
      fi
    done
  else
    color-print 3 "Please install pyenv first."
    exit 1
  fi
}

###################################
# Configure Python
# Globals:
# Arguments:
#   install_homebrew_package
#   color-print
# Returns:
#   None
###################################
function configure_python() {
  color-print 0 "Check python..."
  install_homebrew_package 'pyenv'
  install_python_versions

  # ln -s $(brew --cellar python) ~/.pyenv/versions
}

###################################
# Configure Node
# Globals:
# Arguments:
#   color-print
# Returns:
#   None
###################################
function configure_node() {
  color-print 0 "Check NodeJS and node package manager..."

  sync-git-repo -r $nodemanager "$HOME"/.nvm
  source "$HOME"/.nvm/nvm.sh

  install_node_versions

  copy-file "$HOME"/.npmrc "$SourcePath"/other/

  #color-print 0 "Update npm..."
  #npm install npm@latest -g
}

###################################
# Install different node versions.
# Globals:
# Arguments:
#   nvm
#   color-print
# Returns:
#   None
###################################
function install_node_versions() {
  if nvm --version 2>/dev/null 1>&2; then
    local target_node_versions=(
      '8.9.4'
      '9.4.0'
    )

    local exist_node_versions
    exist_node_versions=$(ls "$HOME"/.nvm/versions/node)
    local need_install=true

    for ((i = 0; i < ${#target_node_versions[@]}; i++)); do
      target_version=${target_node_versions[i]}
      color-print 0 "Check node version $target_version existed or not..."
      for exist_version in $exist_node_versions; do
        if [[ "$exist_version" == "v$target_version" ]]; then
          need_install=false
          break
        fi
      done

      if $need_install; then
        nvm install "$target_version"
        color-print 1 "$target_version has been successfully installed."
      else
        color-print 2 "$target_version has already existed."
      fi
    done
  elif function-exist load-nvm; then
    load-nvm
    install_node_versions
  else
    color-print 3 "Please install node version manager first."
    exit 1
  fi
}

###################################
# Install mac GUI applications.
# Globals:
# Arguments:
#   color-print
# Returns:
#   None
###################################
function install_mac_gui_programs() {
  install_homebrew_cask_package 'dash'
  install_homebrew_cask_package 'sourcetree'
  install_homebrew_cask_package 'p4merge'
  install_homebrew_cask_package 'p4merge'
  install_homebrew_cask_package 'karabiner'
  install_homebrew_cask_package 'karabiner-elements'
  install_homebrew_cask_package 'docker'
  install_homebrew_cask_package 'kindle'
  install_homebrew_cask_package 'mysqlworkbench'
  install_homebrew_cask_package 'gitter'
  install_homebrew_cask_package 'postman'
  install_homebrew_cask_package 'neteasemusic'
  install_homebrew_cask_package 'wireshark'
  install_homebrew_cask_package 'xmind'
  # Is not available
  #install_homebrew_cask_package 'microsoft-azure-storage-explorer'
}

#######################################
# Install tools and settings.
# Globals:
# Arguments:
#   None
# Returns:
#   None
#######################################
function install() {
  install_homebrew

  configure_homebrew_tap

  color-print 0 "Check Ruby..."
  install_homebrew_package 'ruby'

  configure_python

  configure_git

  configure_haskell

  color-print 0 "Check mongo database..."
  install_homebrew_package 'mongodb'
  copy-file "$SourcePath/mongodb/.mongorc.js" "$HOME"

  color-print 0 "Check MySQL database..."
  install_homebrew_package 'mariadb'
  install_homebrew_package 'mycli'
  copy-file "$SourcePath"/mysql/.my.cnf "$HOME"

  color-print 0 "Check Microsoft SQL Server tool..."
  install_python_package 'mssql-cli' '3'

  color-print 0 "Check tree tool..."
  install_homebrew_package 'tree'

  color-print 0 "Check shellcheck tool..."
  install_homebrew_package 'shellcheck'

  color-print 0 "Check download accelerate tool..."
  install_homebrew_package 'axel'

  color-print 0 "Check cppman tool..."
  install_python_package 'cppman' '3'

  color-print 0 "Check icdiff tool..."
  install_homebrew_package 'icdiff'

  color-print 0 "Check github language analysis tool..."
  install_ruby_package 'github-linguist'

  color-print 0 "Check python format tool..."
  install_python_package 'yapf' '3'

  color-print 0 "Check disk usage tool..."
  install_homebrew_package 'ncdu'

  color-print 0 "Check static code analysis tool..."
  install_homebrew_package 'cloc'

  color-print 0 "Check live-stream video download tool..."
  install_homebrew_package 'you-get'

  color-print 0 "Check bash profile..."
  copy-folder "$SourcePath"/bash "$HOME"

  configure_zsh

  install_iTerm2
  # configure_bash

  install_mac_gui_programs

  configure_tmux

  configure_emacs

  configure_vim

  install_fonts

  color-print 0 "Check ClangFormat tool..."
  install_homebrew_package 'clang-format'
  copy-file "$SourcePath"/other/.clang-format "$HOME"

  color-print 0 "Check system monitor tool..."
  # install_homebrew_package 'htop'
  install_python_package 'glances' '3'

  color-print 0 "Check chez-scheme..."
  install_homebrew_package 'chezscheme'

  configure_node
  color-print 0 "Check hexo..."
  # TODO: Need to use 'npm list -g' to determine if packages are existed or not.
  install_npm_package 'hexo-cli'

  color-print 0 "Check API BluePrint..."
  install_npm_package 'drakov'
  install_npm_package 'aglio'

  color-print 0 "Check Javascript analyzer..."
  install_npm_package 'tern'

  color-print 0 "Check travis..."
  install_ruby_package 'travis'

  color-print 0 "Check WakaTime tool..."
  copy-file "$SourcePath"/other/.wakatime.cfg "$HOME"

  install_global_config

  color-print 0 "Setup Mac OS..."
  setup_macos_settings

  color-print 0 "Enable Zsh settings..."
  /usr/local/bin/zsh "$HOME"/.zshrc

  install_custom_commands

  color-print 1 "Done."
}

#######################################
# Backup settings.
# Globals:
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup() {
  color-print 0 "Backup zsh and bash file..."
  copy-file "$HOME"/.zshrc "$SourcePath"/zsh/
  copy-file "$HOME"/.bash_profile "$SourcePath"/bash/
  copy-file "$HOME"/.bashrc "$SourcePath"/bash/
  copy-file "$HOME"/.fzf.zsh "$SourcePath"/zsh/
  copy-file "$HOME"/.fzf.bash "$SourcePath"/bash/

  color-print 0 "Backup emacs..."
  copy-file "$HOME"/.spacemacs "$SourcePath"/emacs/

  color-print 0 "Backup mongo database..."
  copy-file "$HOME"/.mongorc.js "$SourcePath"/mongodb/
  # TODO: backup mongo.conf file.

  color-print 0 "Backup mysql database..."
  copy-file "$HOME"/.my.cnf "$SourcePath"/mysql/

  color-print 0 "Backup clang format information..."
  copy-file "$HOME"/.clang-format "$SourcePath"/other/

  color-print 0 "Backup tmux tool's configuration..."
  copy-file "$HOME"/.tmux.conf "$SourcePath"/other/

  color-print 0 "Backup Vim..."
  copy-folder "$HOME"/.Spacevim.d "$SourcePath"/vim

  backup_global_config

  color-print 0 "Backup Git Configuration..."
  copy-file "$HOME"/.gitconfig "$SourcePath"/git/
  copy-file "$HOME"/.gitignore_global "$SourcePath"/git/

  backup_custom_commands

  color-print 0 "Backup WakaTime Config..."
  copy-file "$HOME/.wakatime.cfg" "$SourcePath"/other/

  color-print 0 "Backup npm config..."
  copy-file "$HOME/.npmrc" "$SourcePath"/other/

  color-print 0 "Backup vs code settings..."
  copy-file "$HOME/Library/Application Support/Code/User/settings.json" "$SourcePath"/other/

  color-print 0 "Make new program effective immediately..."
  /bin/zsh "$HOME"/.zshrc

  # Redirect to the Source folder to show difference
  git --git-dir="$SourcePath"/.git --work-tree="$SourcePath" diff --word-diff

  sync-git-repo "$SourcePath"

  color-print 1 "Done."
}

function usage () {
  echo -e "usage: $(basename "$0") [options] [source_folder_path]

[options]:
-i  Install dot files to this machine.
-b  Backup dot files.
-a  Integrate backup and install.
-p  Color-Print source folder's structure.
-h  Show help information."

  exit 1
}

Install_Dotfiles=0
Backup_Dotfiles=0
InstallAndBackup_Dotfiles=0
Print_Structure=0

while getopts "abiph" option; do
  case $option in
    a)InstallAndBackup_Dotfiles=1;;
    b)Backup_Dotfiles=1;;
    i)Install_Dotfiles=1;;
    p)Print_Structure=1;;
    h|*)usage;;
  esac
done

shift $((OPTIND-1))

if [ -z "$1" ]; then
  SourcePath=$DOTFILES_PATH
else
  SourcePath=$1
fi

SourcePath=$(realpath "$SourcePath" 2>/dev/null)
if [[ $? == 1 ]]; then
  color-print 2 "Please provide the source folder path."
  exit 1
elif [ ! -d "$SourcePath" ] || is-folder-empty "$SourcePath"; then
  color-print 2 "Please check the source folder path."
  exit 1
fi

# main program
# exit the script if any statement returns a non-true return value
set -e

# Ask user provider root password.
read -r -p "Please provide password: " -s user_password && echo -e "\\n"

if [[ $Install_Dotfiles == 1 ]]; then
  install
elif [[ $Backup_Dotfiles == 1 ]]; then
  backup
elif [[ $InstallAndBackup_Dotfiles == 1 ]]; then
  backup
  install
elif [[ $Print_Structure == 1 ]]; then
  tree -C "$SourcePath"
else
  usage
fi

exit $?
