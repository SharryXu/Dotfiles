#!/usr/bin/env bash -l
#
# This program is used to backup or restore dot files.
#
# TODO: 1.Try to seperate all backup methods.
#       2.Check Application folder for some specific apps like iTerm2.
#       3.Check the input parameters and related command like basename.
#       4.Try to concentrate same package tool installation.
#	      5.Add prompt message to let user manually configure the sync folder in applications like Alfred.
#       6.Try to use which command to replace command-exist.
#       7.Try to merge function name push-git-repository and check-git-repository to one function.
#       8.Add vscode backup like code --list-extensions

###################################
# Declare some constant variables.
###################################
declare -r true=0
declare -r false=1
declare -r default_git_commit_message='Sync latest settings.'
declare -r error_message_check_parameters="Please check parameters."
declare -r default_shell=/bin/zsh

################################
# Declare some global variables
################################
declare user_password=''

######################################
# Declare all used git repositories.
######################################
declare -r ohmyzsh=('Oh-My-Zsh' 'https://github.com/robbyrussell/oh-my-zsh ')
declare -r spacemacs=('Spacemacs' 'https://github.com/SharryXu/spacemacs ')
declare -r zshgitprompt=('Zsh-prompt' 'https://github.com/olivierverdier/zsh-git-prompt ')
declare -r powerlinefonts=('Powerline-fonts' 'https://github.com/powerline/fonts ')
declare -r nerdfonts=('Nerd-fonts' 'https://github.com/ryanoasis/nerd-fonts ')
declare -r nodemanager=('Node-Manager' 'https://github.com/creationix/nvm ')
declare -r tmuxpluginmanager=('TmuxPluginManager' 'https://github.com/tmux-plugins/tpm ')
declare -r tmuxpluginyank=('TmuxPlugin:Yank' 'https://github.com/tmux-plugins/tmux-yank ')
declare -r tmuxpluginsensible=('TmuxPlugin:Sensible' 'https://github.com/tmux-plugins/tmux-sensible ')
declare -r tmuxpluginsidebar=('TmuxPlugin:Sidebar' 'https://github.com/tmux-plugins/tmux-sidebar ')

#############################
# Install all homebrew tap
# Globals:
#   Homebrew
#   Print
# Arguments:
# Returns:
#   None
#############################
function configure_homebrew_tap() {
  ###########################
  # homebrew tap list
  ###########################
  local target_homebrew_tap_list=(
    'caskroom/cask'
    'caskroom/fonts'
    'd12frosted/emacs-plus'
    'homebrew/core'
    'homebrew/php'
    'homebrew/services'
    'omnisharp/omnisharp-roslyn'
  )

  local exist_homebrew_tap_list=$(brew tap)
  local need_install=$true
  for ((i = 0; i < ${#target_homebrew_tap_list[@]}; i++)); do
    target_tap=${target_homebrew_tap_list[i]}
    print 0 "Check homebrew tap $target_tap..."
    for exist_tap in $exist_homebrew_tap_list; do
      if [[ $exist_tap == $target_tap ]]; then
        need_install=$false
        break
      fi
    done

    if [[ $need_install == $true ]]; then
      brew tap $target_tap
      print 1 "$target_tap has been successfully added."
    else
      print 2 "$target_tap has already existed."
    fi
  done
}

#######################################
# Using homebrew tool to install gui packages.
# Globals:
#   homebrew
#   print
# Arguments:
#   Cask Package name
# Returns:
#   None
#######################################
function install_homebrew_cask_package() {
  if [[ $# == 1 ]]; then
    local need_install=$true
    for exist_cask in $(brew cask list); do
      if [[ $exist_cask == $1 ]]; then
        need_install=$false
        break
      fi
    done

    if [[ $need_install == $true ]]; then
      brew cask install $1
      print 1 "$1 has been successfully installed."
    else
      print 2 "$1 has already existed."
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

######################################
# Using npm tool to install packages.
# Globals:
#   command-exist
#   npm
#   print
# Arguments:
#   Tool Name/Command Line Name
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_npm_package() {
  #TODO: Converge all npm packages in one place.
  # Warning: Most npm packages need python2.
  choose_appropriate_python_version '2'

  if [[ $# == 1 ]]; then
    local need_install=$true
    for exist_package in $(print-npm-packages); do
      if [[ $exist_package == $1 ]]; then
        need_install=$false
        break
      fi
    done

    if [[ $need_install == $true ]]; then
      print 0 "Install latest version for $1..."
      npm install -g $1@latest
      print 1 "$1 has successfully been installed."
    else
      print 2 "$1 has already existed"
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Using homebrew to install tool.
# Globals:
#   brew
#   command-exist
#   print
# Arguments:
#   Tool Name
#   Command Line Name (Optional)
# Returns:
#   None
#######################################
function install_homebrew_package() {
  if [[ $# == 1 ]]; then
    shopt -s nocasematch
    local need_install=$true
    for package in $(brew list); do
      if [[ $package == $1 ]]; then
        need_install=$false
      fi
    done

    if [[ $need_install == $true ]]; then
      brew install $1
      print 1 "$1 has successfully been installed."
    else
      print 2 "$1 has already existed."
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#############################################
# Using Git to get latest version or clone.
# Globals:
#   git
#   print
# Arguments:
#   Local Folder Path
#   Remote Repository Name
#   Remote Repository Path
#   Branch Name (Optional)
#   Depth (Optional)
# Returns:
#   None
#############################################
function check_git_repository() {
  # Please notice if the parameter is an array, then the number should count the array's length.
  if [ $# -ge 3 ]; then
    local repoInfo=$2
    if [ -d $1 ]; then
      if [[ $(is-folder-empty $1) == $true ]] ; then
        print 2 "${repoInfo[0]} existed but it's empty."
        git clone ${repoInfo[1]} $1
        print 1 "${repoInfo[0]} has been successfully cloned."
      else
        print 0 "${repoInfo[0]} existed and now will pull the latest version."
        cd $1

        if [ $# -ge 4 ]; then
          print 1 "Checkout to branch: $4."
          git checkout $4
        fi

        git pull
        cd - 1>/dev/null

        print 1 "${repoInfo[0]} has been successfully updated."
      fi
    else
      print 2 "${repoInfo[0]} is not existed and now downloading..."

      if [ $# -ge 5 ]; then
        sudo git clone ${repoInfo[1]} $1 --depth $5
      else
        sudo git clone ${repoInfo[1]} $1
      fi

      print 1 "${repoInfo[0]} has been successfully cloned."
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

# TODO: Save package list to file and read it when you need
#######################################
# Install ruby packages.
# Globals:
#   gem
#   print
# Arguments:
#   Package name
# Returns:
#   None
#######################################
function install_ruby_package() {
  if [ $# -eq 1 ]; then
    local need_install=$true
    for package in $(gem list --local --no-version | sed -n '4,$p'); do
      if [[ "$package" == *"$1" ]]; then
        need_install=$false
        break
      fi
    done

    if [[ $need_install == $true ]]; then
      # Need root permission to write /Library/Ruby/Gems/2.0.0
      echo $user_password | sudo -S gem install $1
      print 1 "Ruby package name $1 has been successfully installed."
    else
      print 2 "Ruby package name $1 has already existed."
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Swtich shell's python version.
# Globals:
#   print
# Arguments:
#   Major version.
#   Minor version. (Optional)
# Returns:
#   None
#######################################
function choose_appropriate_python_version() {
  if [[ ($# -ge 1) && ($# -lt 3) && $(command-exist pyenv) == $true && $(is-number $1) == $true ]]; then
    local set=1
    local majorVer=$1
    local minorVer=$2
    for version in $(pyenv versions --bare); do
      if [[ ($(is-number $minorVer) == $true && "$version" == "$majorVer.$2."*) || ($(is-number $minorVer) == $false && "$version" == "$majorVer."*) ]]; then
        set=0
        pyenv shell $version
      fi
    done

    if [[ $set == $false ]]; then
      print 3 "Please provide appropriate python version."
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Install python packages.
# Globals:
#   pip2,3
#   print
# Arguments:
#   Package name
#   Major version (3=pip3, 2=pip2)
#   Minor version (Optional)
# Returns:
#   None
#######################################
function install_python_package() {
  if [[ $(command-exist 'pyenv') == $true ]]; then
    eval "$(pyenv init -)"
	else
    print 3 "The program name pyenv is not existed."
    install_homebrew_package 'pyenv'
	  exit 1
  fi

  if [[ $# -ge 2 ]]; then
    choose_appropriate_python_version $2 $3

    shopt -s nocasematch

    local need_install=$true
    for package in $(pip$2 list --format=columns | sed -n '3,$p'); do
      if [[ "$package" == *"$1" ]]; then
        need_install=$false
        break
      fi
    done

    if [[ $need_install == $true ]]; then
      pip$2 install --user $1
      print 1 "Python package name $1 has been successfully installed."
    else
      print 2 "Python package name $1 has already existed."
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

#######################################
# Setup Mac OS Inside parameters.
# Globals:
#   print
# Arguments:
#   None
# Returns:
#   None
#######################################
function setup_macos_settings() {
  print 0 "Show full file path on the tile in Finder..."
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true && killall Finder
  # Adjust the delay time for Dock displaying
  defaults write com.apple.Dock autohide-delay -float 0
  # Adjust the LaunchPad layout
  # defaults write com.apple.dock springboard-columns -int 8
  # defaults write com.apple.dock springboard-rows -int 7
  # Adjust the transpalent value for LaunchPad
  # defaults write com.apple.dock springboard-blur-radius -int 100
  # defaults write com.apple.dock ResetLaunchPad -bool true
  # Adjust the default location for screenshots
  # defaults write com.apple.screencapture location ~/Desktop/screenshots; killall SystemUIServer
  # Adjust the default screenshot type
  # defaults write com.apple.screencapture type jpg && killall SystemUIServer
  killall Dock
}

#######################################
# Install custom commands.
# Globals:
#   copy-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function install_custom_commands() {
  if [ ! -d "$HOME/.bin" ]; then
    mkdir $HOME/.bin
  fi

  sync-folder -s "$user_password" $SourcePath/bin $HOME/.bin

  # Make all files executable
  for i in $HOME/.bin/*; do
    chmod +x $i
  done
}

#######################################
# Backup custom commands.
# Globals:
#   copy-folder
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup_custom_commands() {
  sync-folder -s "$user_password" $HOME/.bin $SourcePath/bin

  # Make all files executable
  for i in $SourcePath/bin/*; do
    chmod +x $i
  done
}

#############################################
# Push git repository. (Default: master branch)
# Globals:
#   git
#   basename
#   print
# Arguments:
#   Local Repository Name
# Returns:
#   None
#############################################
function push_git_repository() {
  local repositoryname=$(basename $1)

  if [ $# -ge 1 ]; then
    if [ -d $1 ] && [[ $(is-folder-empty $1) == $false ]] ; then
	    print 0 "Please provide appropriate message:"
      read commitMessage
      if [[ -z $commitMessage ]]; then
        commitMessage=$default_git_commit_message
      fi

      cd $1

      git add .
      git commit -m "$commitMessage"
      git push

      if [ $? -eq 0 ]; then
        print 1 "Repository name $repositoryname has been successfully pushed."
      else
        print 3 "Something wrong happened when pushing the repository."
      fi

      cd - 1>/dev/null
    fi
  else
    print 3 "$error_message_check_parameters"
    exit 1
  fi
}

##################################
# Install homebrew
# Globals:
# Arguments:
#   command-exist
#   print
# Returns:
#   None
##################################
function install_homebrew() {
  print 0 "Check brew..."
  if [[ $(command-exist 'brew') == $true ]] ; then
    brew update
    print 1 "brew has been successfully updated."
    print 0 "Update all brew packages..."
    brew upgrade
    print 1 "All brew packages have been updated."
  else
    if [[ $(command-exist 'ruby') == $true ]] ; then
      print 3 "Please install Ruby first."
      exit 1
    else
      ruby $SourcePath/brew/brew_install
      print 1 "brew has been successfully installed."
    fi
  fi
}

function configure_haskell() {
  print 0 "Check Haskell environment..."

  if [[ $(command-exist stack) == $false ]]; then
    curl -sSL https://get.haskellstack.org/ | sh
  fi
}
###################################
# Configure zsh and oh-my-zsh
# Globals:
# Arguments:
#   install_homebrew_package
#   chsh
#   print
#   copy-file
#   check_git_repository
# Returns:
#   None
###################################
function configure_zsh() {
  print 0 "Check default shell to zsh..."
  install_homebrew_package 'zsh'
  if [[ $SHELL != $default_shell ]]; then
    echo $user_password | sudo -S chsh -s $default_shell
  fi

  print 0 "Check oh-My-Zsh..."
  check_git_repository $HOME/.oh-my-zsh ${ohmyzsh[*]}
  copy-file $SourcePath/zsh/.zshrc $HOME
  copy-file $SourcePath/zsh/sharry.zsh-theme $HOME/.oh-my-zsh/themes/

  print 0 "Configure Zsh git prompt..."
  check_git_repository $HOME/.zsh-git-prompt ${zshgitprompt[*]}
  if [[ $(command-exist stack) == $false ]]; then
    configure_haskell
  fi
  cd $HOME/.zsh-git-prompt && stack setup && stack build && stack install && cd - 1>/dev/null
}

###################################
# Configure tmux
# Globals:
# Arguments:
#   install_homebrew_package
#   install_ruby_package
#   print
#   copy-file
#   check_git_repository
# Returns:
#   None
###################################
function configure_tmux() {
  print 0 "Check tmux tool..."
  install_homebrew_package 'tmux'
  install_ruby_package 'tmuxinator'
  copy-file $SourcePath/other/.tmux.conf $HOME

  print 0 "Check related tmux plugins..."
  install_homebrew_package 'reattach-to-user-namespace'
  check_git_repository $HOME/.tmux/plugins/tpm ${tmuxpluginmanager[*]}
  check_git_repository $HOME/.tmux/plugins/tmux-yank ${tmuxpluginyank[*]}
  check_git_repository $HOME/.tmux/plugins/tmux-sensible ${tmuxpluginsensible[*]}
  check_git_repository $HOME/.tmux/plugins/tmux-sidebar ${tmuxpluginsidebar[*]}

  tmux source-file ~/.tmux.conf
}

###################################
# Configure emacs
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   print
#   copy-file
#   check_git_repository
# Returns:
#   None
###################################
function configure_emacs() {
  # config emacs (substitute the default emacs installed by Mac OS)
  print 0 "Check emacs..."
  install_homebrew_package 'ag'
  install_homebrew_package 'emacs-plus'
  check_git_repository $HOME/.emacs.d ${spacemacs[*]}
  copy-file $SourcePath/emacs/.spacemacs $HOME
  # Remove this file to avoid the strange characters in the Spacemacs' terminal mode.
  if [ -f "$HOME/.iterm2_shell_integration.zsh" ]; then
    rm $HOME/.iterm2_shell_integration.zsh
  fi
  install_npm_package 'wakatime'
  install_homebrew_package 'cppcheck'
}

###################################
# Configure vim
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   print
#   copy-file
#   check_git_repository
# Returns:
#   None
###################################
function configure_vim() {
  print 0 "Check Vim..."
  install_homebrew_package 'vim'
  install_homebrew_package 'neovim'

  # Configure SpaceVim
  if [ ! -d $HOME/.Spacevim ]; then
    curl -sLf https://spacevim.org/install.sh | bash
  fi
  copy-file $SourcePath/vim/* $HOME/.Spacevim.d/
}

###################################
# Install fonts
# Globals:
# Arguments:
#   print
#   check_git_repository
# Returns:
#   None
###################################
function install_fonts() {
  print 0 "Check Nerd fonts..."
  install_homebrew_cask_package 'font-hack-nerd-font'
  # Use brew cask to install.
  # check_git_repository $HOME/.fonts-nerd ${nerdfonts[*]}
  # $HOME/.fonts-nerd/install.sh 1> /dev/null

  print 0 "Check Powerline fonts..."
  check_git_repository $HOME/.fonts-powerline ${powerlinefonts[*]}
  $HOME/.fonts-powerline/install.sh 1> /dev/null
}

###################################
# Configure Git
# Globals:
# Arguments:
#   install_homebrew_package
#   install_python_package
#   print
#   copy-file
# Returns:
#   None
###################################
function configure_git() {
  print 0 "Check git..."
  install_homebrew_package 'git'
  install_homebrew_package 'tig'
  copy-file $SourcePath/git/.gitconfig $HOME/
  copy-file $SourcePath/git/.gitignore_global $HOME/
  install_python_package 'gitsome' '3'
}

###################################
# Install different python versions.
# Globals:
# Arguments:
#   pyenv
#   print
# Returns:
#   None
###################################
function install_python_versions() {
  if [[ $(command-exist pyenv) == $true ]]; then
    local target_python_versions=(
      '2.7.14'
      '3.5.4'
    )

    local exist_python_versions=$(pyenv versions --bare)
    local need_install=$true
    for ((i = 0; i < ${#target_python_versions[@]}; i++)); do
      target_version=${target_python_versions[i]}
      print 0 "Check python version $target_version existed or not..."
      for exist_version in $exist_python_versions; do
        if [[ $exist_version == $target_version ]]; then
          need_install=$false
          break
        fi
      done

      if [[ $need_install == $true ]]; then
        pyenv install $target_version
        print 1 "$target_version has been successfully installed."
      else
        print 2 "$target_version has already existed."
      fi
    done
  else
    print 3 "Please install pyenv first."
    exit 1
  fi
}

###################################
# Configure Python
# Globals:
# Arguments:
#   install_homebrew_package
#   print
# Returns:
#   None
###################################
function configure_python() {
  print 0 "Check python..."
  install_homebrew_package 'pyenv'
  install_python_versions

  # ln -s $(brew --cellar python) ~/.pyenv/versions
}

###################################
# Configure Node
# Globals:
# Arguments:
#   print
# Returns:
#   None
###################################
function configure_node() {
  print 0 "Check NodeJS and node package manager..."

  check_git_repository $HOME/.nvm ${nodemanager[*]}
  source $HOME/.nvm/nvm.sh

  install_node_versions

  print 0 "Update npm..."
  npm install npm@latest -g
}

###################################
# Install different node versions.
# Globals:
# Arguments:
#   nvm
#   print
# Returns:
#   None
###################################
function install_node_versions() {
  if [[ $(function-exist nvm) == $true ]]; then
    local target_node_versions=(
      '8.9.4'
      '9.4.0'
    )

    local exist_node_versions=$(ls $HOME/.nvm/versions/node)
    local need_install=$true
    for ((i = 0; i < ${#target_node_versions[@]}; i++)); do
      target_version=${target_node_versions[i]}
      print 0 "Check node version $target_version existed or not..."
      for exist_version in $exist_node_versions; do
        if [[ "$exist_version" == "v$target_version" ]]; then
          need_install=$false
          break
        fi
      done

      if [[ $need_install == $true ]]; then
        nvm install $target_version
        print 1 "$target_version has been successfully installed."
      else
        print 2 "$target_version has already existed."
      fi
    done
  else
    print 3 "Please install node version manager first."
    exit 1
  fi
}

#######################################
# Install tools and settings.
# Globals:
# Arguments:
#   None
# Returns:
#   None
#######################################
function install() {
  install_homebrew

  configure_homebrew_tap

  print 0 "Check Ruby..."
  install_homebrew_package 'ruby'

  configure_python

  configure_git

  configure_haskell

  print 0 "Check mongo database..."
  install_homebrew_package 'mongodb'
  copy-file $SourcePath/mongodb/.mongorc.js $HOME

  print 0 "Check MySQL database..."
  install_homebrew_package 'mariadb'
  install_homebrew_package 'mycli'
  copy-file $SourcePath/mysql/.my.cnf $HOME

  print 0 "Check Microsoft SQL Server tool..."
  install_python_package 'mssql-cli' '3'

  print 0 "Check tree tool..."
  install_homebrew_package 'tree'

  print 0 "Check shellcheck tool..."
  install_homebrew_package 'shellcheck'

  print 0 "Check download accelerate tool..."
  install_homebrew_package 'axel'

  print 0 "Check cppman tool..."
  install_python_package 'cppman' '3'

  print 0 "Check icdiff tool..."
  install_homebrew_package 'icdiff'

  print 0 "Check python format tool..."
  install_python_package 'yapf' '3'

  print 0 "Check disk usage tool..."
  install_homebrew_package 'ncdu'

  print 0 "Check static code analysis tool..."
  install_homebrew_package 'cloc'

  print 0 "Check live-stream video download tool..."
  install_homebrew_package 'you-get'

  print 0 "Check bash profile..."
  copy-folder $SourcePath/bash $HOME

  configure_zsh

  # configure_bash

  configure_tmux

  configure_emacs

  configure_vim

  install_fonts

  print 0 "Check ClangFormat tool..."
  install_homebrew_package 'clang-format'
  copy-file $SourcePath/other/.clang-format $HOME

  print 0 "Check system monitor tool..."
  # install_homebrew_package 'htop'
  install_python_package 'glances' '3'

  print 0 "Check chez-scheme..."
  install_homebrew_package 'chezscheme'

  configure_node
  print 0 "Check hexo..."
  # TODO: Need to use 'npm list -g' to determine if packages are existed or not.
  install_npm_package 'hexo-cli'

  print 0 "Check API BluePrint..."
  install_npm_package 'drakov'
  install_npm_package 'aglio'

  print 0 "Check Javascript analyzer..."
  install_npm_package 'tern'

  print 0 "Check travis..."
  install_ruby_package 'travis'

  print 0 "Check WakaTime tool..."
  copy-file $SourcePath/other/.wakatime.cfg $HOME

  print 0 "Install System Config..."
  sync-folder -s "$user_password" $SourcePath/config $HOME/.config

  print 0 "Setup Mac OS..."
  setup_macos_settings

  print 0 "Enable Zsh settings..."
  /bin/zsh $HOME/.zshrc

  print 0 "Create custom programs..."
  install_custom_commands

  print 1 "Done."
}

#######################################
# Backup settings.
# Globals:
# Arguments:
#   None
# Returns:
#   None
#######################################
function backup() {
  print 0 "Backup zsh and theme file..."
  copy-file $HOME/.zshrc $SourcePath/zsh/
  copy-file $HOME/.oh-my-zsh/themes/sharry.zsh-theme $SourcePath/zsh/

  print 0 "Backup bash file..."
  copy-file $HOME/.bash_profile $SourcePath/bash/
  copy-file $HOME/.bashrc $SourcePath/bash/

  print 0 "Backup emacs..."
  copy-file $HOME/.spacemacs $SourcePath/emacs/

  print 0 "Backup mongo database..."
  copy-file $HOME/.mongorc.js $SourcePath/mongodb/
  # TODO: backup mongo.conf file.

  print 0 "Backup mysql database..."
  copy-file $HOME/.my.cnf $SourcePath/mysql/

  print 0 "Backup clang format information..."
  copy-file $HOME/.clang-format $SourcePath/other/

  print 0 "Backup tmux tool's configuration..."
  copy-file $HOME/.tmux.conf $SourcePath/other/

  print 0 "Backup Vim..."
  copy-folder $HOME/.Spacevim.d $SourcePath/vim

  print 0 "Backup System Config..."
  sync-folder -s "$user_password" $HOME/.config $SourcePath/config

  print 0 "Backup Git Configuration..."
  copy-file $HOME/.gitconfig $SourcePath/git/
  copy-file $HOME/.gitignore_global $SourcePath/git/

  print 0 "Backup custom programs..."
  backup_custom_commands

  print 0 "Backup WakaTime Config..."
  copy-file $HOME/.wakatime.cfg $SourcePath/other/

  print 0 "Make new program effective immediately..."
  /bin/zsh $HOME/.zshrc

  print 1 "Done."

  # Redirect to the Source folder
  cd $SourcePath

  # Show difference
  git icdiff

  if [[ $(git diff) != '' ]]; then
    if [[ $(choose-yes-or-no "Do you want push to the remote?") == $true ]]; then
      print 0 "Push to remote git repository..."
      push_git_repository $SourcePath
    fi
  fi
}

function usage () {
  echo -e "usage: $(basename $0) [options] [source_folder_path]\n
[options]:
-i  Install dot files to this machine.
-b  Backup dot files.
-a  Integrate backup and install.
-p  Print source folder's structure.
-h  Show help information."
  exit 1
}

Install_Dotfiles=0
Backup_Dotfiles=0
InstallAndBackup_Dotfiles=0
Print_Structure=0

while getopts "abiph" option; do
  case $option in
    a)InstallAndBackup_Dotfiles=1;;
    b)Backup_Dotfiles=1;;
    i)Install_Dotfiles=1;;
    p)Print_Structure=1;;
    h|*)usage;;
  esac
done

shift $((OPTIND-1))

if [ -z "$1" ]; then
  SourcePath=$dotfile_path
else
  SourcePath=$1
fi

SourcePath=$(realpath $SourcePath 2>/dev/null)
if [[ $? != 0 ]]; then
  print 2 "Please provide the source folder path."
  exit 1
elif [ ! -d $SourcePath ] || [[ $(is-folder-empty $SourcePath) == $true ]]; then
  print 2 "$SourcePath is not existed or empty."
  exit 1
fi

# Ask user provider root password.
read -p "Please provide password: " -s user_password && echo -e "\n"

if [[ $Install_Dotfiles == 1 ]]; then
  install
elif [[ $Backup_Dotfiles == 1 ]]; then
  backup
elif [[ $InstallAndBackup_Dotfiles == 1 ]]; then
  backup
  install
elif [[ $Print_Structure == 1 ]]; then
  tree -C $SourcePath
else
  usage
fi

exit $?

# main program
# exit the script if any statement returns a non-true return value
# set -e
