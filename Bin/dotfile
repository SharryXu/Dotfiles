#!/bin/bash
# This program is used to backup or restore dot files.
# TODO: 1.Try to seperate all backup methods.
#       2.Highlight error and warning message in the term.
#       3.Replace all things like './'

ohmyzsh=('Oh-My-Zsh' 'https://github.com/robbyrussell/oh-my-zsh')
spacemacs=('Spacemacs' 'https://github.com/SharryXu/spacemacs')
zshgitprompt=('Zsh-prompt' 'https://github.com/olivierverdier/zsh-git-prompt')
powerlinefonts=('Nerd-fonts' 'https://github.com/ryanoasis/nerd-fonts')
nerdfonts=('Nerd-fonts' 'https://github.com/ryanoasis/nerd-fonts')
nvm=('Node Manager' 'https://github.com/creationix/nvm')
ohmytmux=('Oh-My-Tmux' 'https://github.com/SharryXu/.tmux')

useremail="852083454@qq.com"
username="SharryXu"

function isProgramExisted() {
    if [ $# -eq 1 ]; then
        if command -v $1 > /dev/null 2>&1; then
            echo 1;
        else
            echo 0;
        fi
    else
        echo -1;
    fi
}

function isServerAlive () {
    if [ $# -eq 1 ]; then
        local tryCounts = 3
        local result=`ping $1 -c $tryCounts | grep "^\w\{2\} bytes from .*ttl=[0-9]" -c`
        if [ $result -eq $tryCounts ]; then
            echo 1;
        else
            echo 0;
        fi
    else
        echo -1;
    fi
}

function npmInstallIfNotExist() {
    if [ $# -gt 0 ]; then
        if [ $# -eq 2 ]; then
            result=$(isProgramExisted $2)
        else
            result=$(isProgramExisted $1)
        fi

        if [ $result -eq 1 ]; then
            echo $1 "has already existed"
        elif [ $result -eq 0 ]; then
            npm install -g $1@latest
            echo $1 "has successfully been installed."
        else
            echo "Please indicate the program name to install"
        fi
    else
        echo "Please check parameters."
    fi
}

function brewInstallIfNotExist() {
    # By default, we think tool name ($1) is the command name ($2)
    if [ $# -gt 0 ]; then
        if [ $# -eq 2 ]; then
            result=$(isProgramExisted $2)
        else
            result=$(isProgramExisted $1)
        fi

        if [ $result -eq 1 ]; then
            echo $1 "has already existed."
        elif [ $result -eq 0 ]; then
            brew install $1
            echo $1 "has successfully been installed."
        else
            echo "Please indicate the command name to install"
        fi
    else
        echo "Please check parameters."
    fi
}

function gitCloneOrUpdate() {
    local currentFolder=$PWD
    # Please notice if the parameter is an array, then the number should count the array's length.
    if [ $# -ge 3 ]; then
        local repoInfo=$2
        if [ -d $1 ]; then
            echo ${repoInfo[0]} "existed and now will pull the latest version."
            cd $1
            # TODO: Try to redirect the git output to shell itself
            # And if the repo is very large, just need to ge the first level.
            git pull
            cd $currentFolder
        else
            echo "Downloading " $1 "..."
            # TODO: Add new parameter to support --depth
            git clone ${repoInfo[1]} $1
            echo ${repoInfo[0]} "has been successfully downloaded."
        fi
    else
        echo "Please check parameters."
    fi
}

# TODO: Save package list to file and read it when you need
function rubyPackageInstall() {
    if [ $# -eq 1 ]; then
        local isExisted=0
        read -ra installedPackages <<< `gem list --local --no-version | sed -n '4,$p'`
        for ((i = 0; i < ${#installedPackages[@]}; i += 2)); do
            if [[ "${installedPackages[$i]}" == *"$1" ]]; then
                isExisted=1
                break
            fi
        done

        if [ $isExisted -eq 1 ]; then
            echo "Ruby package name " $1 " has already existed."
        else
            # Need root permission to write /Library/Ruby/Gems/2.0.0
            sudo gem install $1
            echo "Ruby package name " $1 " has been successfully installed."
        fi
    else
        echo "Please check parameters."
    fi
}

function pythonPackageInstall() {
    if [ $# -eq 2 ]; then
        local isExisted=0
        read -ra installedPackages <<< `pip$2 list --format=columns | sed -n '3,$p'`
        for ((i = 0; i < ${#installedPackages[@]}; i += 2)); do
            if [[ "${installedPackages[$i]}" == *"$1" ]]; then
                isExisted=1
                break
            fi
        done

        if [ $isExisted -eq 1 ]; then
            echo "Python package name " $1 "has already existed."
        else
            pip$2 install --user $1
            echo "Python package name " $1 "has been successfully installed."
        fi
    else
        echo "Please check parameters."
    fi
}

function setupMacOS() {
    echo "Setup Mac OS..."
    echo "Show full file path on the tile in Finder..."
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true && killall Finder
    # Adjust the delay time for Dock displaying
    defaults write com.apple.Dock autohide-delay -float 0
    # Adjust the LaunchPad layout
    # defaults write com.apple.dock springboard-columns -int 8
    # defaults write com.apple.dock springboard-rows -int 7
    # Adjust the transpalent value for LaunchPad
    # defaults write com.apple.dock springboard-blur-radius -int 100
    # defaults write com.apple.dock ResetLaunchPad -bool true
    # Adjust the default location for screenshots
    # defaults write com.apple.screencapture location ~/Desktop/screenshots; killall SystemUIServer
    # Adjust the default screenshot type
    # defaults write com.apple.screencapture type jpg && killall SystemUIServe 
    killall Dock
}

# TODO: Write those things to a separate file.
function setupGit() {
    echo "Setup Git tool..."
    git config --global --add user.name $username
    git config --global --add user.email $useremail
    git config --global --add rerere.enabled 1
}

function installCustomTools() {
    echo "Create custom tools..."
    if [ ! -d "$HOME/.bin" ]; then
        mkdir $HOME/.bin
    else
        rm -rf $HOME/.bin/*
    fi 

    cp $SourcePath/Bin/* $HOME/.bin
}

function backupCustomTools() {
    echo "Backup custom tools..."
    if [ -d $HOME/.bin ]; then
        cp $HOME/.bin/* $SourcePath/Bin/
    fi
}

function install() {
    echo "Check brew..."
    local result=$(isProgramExisted 'brew')
    if [ $result -eq 0 ]; then
        result=$(isProgramExisted 'ruby')
        if [ $result -eq 0 ]; then
            echo "Please install Ruby first."
        else
            ruby $SourcePath/Brew/brew_install 
            echo "brew has been successfully installed."
        fi
    else
        brew update
        echo "brew has been successfully updated."
        echo "Update all brew packages..."
        brew upgrade
        echo "All brew packages have been updated."
    fi

    echo "Check Ruby..."
    brewInstallIfNotExist 'ruby'

    echo "Check git..."
    brewInstallIfNotExist 'git'

    echo "Check python3..."
    brewInstallIfNotExist 'python3'

    echo "Check mongo database..."
    brewInstallIfNotExist 'mongodb' 'mongo'
    cp $SourcePath/MongoDB/.mongorc.js $HOME

    echo "Check mysql database..."
    brewInstallIfNotExist 'mariadb' 'mysql'
    cp $SourcePath/MySQL/.my.cnf $HOME

    echo "Check tree tool..."
    brewInstallIfNotExist 'tree'

    echo "Check Oh-My-Zsh..."
    gitCloneOrUpdate $HOME/.oh-my-zsh ${ohmyzsh[*]}
    cp $SourcePath/Zsh/.zshrc $HOME

    echo "Check tmux tool..."
    brewInstallIfNotExist 'tmux'
    brewInstallIfNotExist 'reattach-to-user-namespace'
    rubyPackageInstall 'tmuxinator'
    gitCloneOrUpdate $HOME/.tmux ${ohmytmux[*]}
    ln -s -f $HOME/.tmux/.tmux.conf $HOME
    cp $SourcePath/Other/.tmux.conf.local $HOME

    # config emacs (substitute the default emacs installed by Mac OS)
    echo "Check emacs..."
    brewInstallIfNotExist 'emacs'
    gitCloneOrUpdate $HOME/.emacs.d ${spacemacs[*]}
    cp $SourcePath/Emacs/.spacemacs $HOME
    # Remove this file to avoid the strange characters in the Spacemacs' terminal mode.
    if [ -f "$HOME/.iterm2_shell_integration.zsh" ]; then
        rm $HOME/.iterm2_shell_integration.zsh
    fi

    # config fonts
    echo "Check fonts..."
    gitCloneOrUpdate $HOME/.fonts ${nerdfonts[*]}
    $HOME/.fonts-nerd/install.sh 1> /dev/null
    gitCloneOrUpdate $HOME/.fonts ${powerlinefonts[*]}
    $HOME/.fonts-powerline/install.sh 1> /dev/null

    echo "Check Vim..."
    brewInstallIfNotExist 'vim --with-override-system-vim' 'vim'
    brewInstallIfNotExist 'neovim' 'nvim'
    rubyPackageInstall 'neovim'
    pythonPackageInstall 'neovim' '2'
    pythonPackageInstall 'neovim' '3'
    cp $SourcePath/Vim/* $HOME/.SpaceVim.d/

    echo "Check ClangFormat tool..."
    brewInstallIfNotExist 'clang-format'
    cp $SourcePath/Other/.clang-format $HOME

    echo "Check htop tool..."
    brewInstallIfNotExist 'htop'

    echo "Check NodeJS..."
    brewInstallIfNotExist 'node'
    brewInstallIfNotExist 'npm'

    echo "Check Node Manager..."
    gitCloneOrUpdate $HOME/.nvm $nvm
    source $HOME/.nvm/nvm.sh

    echo "Check hexo..."
    # TODO: Need to use 'npm list -g' to determine if packages are existed or not. 
    npmInstallIfNotExist 'hexo-cli' 'hexo'

    echo "Check API BluePrint..."
    npmInstallIfNotExist 'drakov'
    npmInstallIfNotExist 'aglio'

    installCustomTools

    setupMacOS

    echo "Enable Zsh settings..."
    /bin/zsh $HOME/.zshrc

    echo "Done."
}

function backup() {
    echo "Backup Oh-My-Zsh..."
    cp $HOME/.zshrc $SourcePath/Zsh/

    echo "Backup emacs..."
    cp $HOME/.spacemacs $SourcePath/Emacs/

    echo "Backup mongo database..."
    cp $HOME/.mongorc.js $SourcePath/MongoDB/
    #TODO: backup mongo.conf file.

    echo "Backup mysql database..."
    cp $HOME/.my.cnf $SourcePath/MySQL/

    echo "Backup clang format information..."
    cp $HOME/.clang-format $SourcePath/Other/

    echo "Backup tmux tool's configuration..."
    cp $HOME/.tmux.conf.local $SourcePath/Other/

    echo "Backup Vim..."
    cp $HOME/.SpaceVim.d/* $SourcePath/Vim

    echo "Backup System Config..."
    cp $HOME/.config/fontconfig/ $SourcePath/Config/fontconfig/
    cp $HOME/.config/tmuxinator/ $SourcePath/Config/tmuxinator/

    backupCustomTools

    echo "Done."
}

manual="Usage: dotfile [Options] <Absolute-Source-Path>\n\n
[Options]:\n
-i  Install dot files to this machine.\n
-b  Backup dot files."

# main program
if [ ! $# -eq 2 ]; then
    echo -e $manual
    exit 1
else
    # TODO: Read source path from file
    SourcePath=$2
    if [ "$1" = "-b" ]; then
        backup
        exit $? 
    elif [ "$1" = "-i" ]; then
        install
        exit $? 
    else
        echo "Wrong parameters. Please check following instructions."
        echo -e $manual
        exit 1
    fi
fi
