#!/bin/bash
# This program is used to backup or restore dot files.
# TODO: 1.Try to seperate all backup methods.
#       2.Add error handle mechanism.

d_Black='\033[0;30m'
d_Red='\033[0;31m'
d_Green='\033[0;32m'
d_Yellow='\033[1;33m'
d_Blue='\033[0;34m'
d_White='\033[1;37m'
d_NC='\033[0m'

ohmyzsh=('Oh-My-Zsh' 'https://github.com/robbyrussell/oh-my-zsh')
spacemacs=('Spacemacs' 'https://github.com/SharryXu/spacemacs')
zshgitprompt=('Zsh-prompt' 'https://github.com/olivierverdier/zsh-git-prompt')
powerlinefonts=('Powerline-fonts' 'https://github.com/powerline/fonts')
nerdfonts=('Nerd-fonts' 'https://github.com/ryanoasis/nerd-fonts')
nvm=('Node Manager' 'https://github.com/creationix/nvm')
ohmytmux=('Oh-My-Tmux' 'https://github.com/SharryXu/.tmux')

function printResult() {
    if [ $# -eq 2 ]; then
        if [ $1 -eq 0 ]; then
            echo -e "${d_Green}$2${d_NC}"
        elif [ $1 -eq 1 ]; then
            echo -e "${d_Red}$2${d_NC}"
        else
            echo -e "${d_Yellow}$2${d_NC}"
        fi
    else
        echo -e "${d_Red}Please check parameters.${d_NC}"
        exit 1
    fi
}

function printTitle() {
    if [ $# -eq 1 ]; then
        echo -e "${d_Blue}$1${d_NC}"
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function isProgramExisted() {
    if [ $# -eq 1 ]; then
        if command -v $1 > /dev/null 2>&1; then
            true
        else
            false
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function isServerAlive () {
    if [ $# -eq 1 ]; then
        local tryCounts = 3
        local result=`ping $1 -c $tryCounts | grep "^\w\{2\} bytes from .*ttl=[0-9]" -c`
        if [ $result -eq $tryCounts ]; then
            return 1;
        else
            return 0;
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function isFolderEmpty () {
    if [ $# -eq 1 ]; then
        local result=`find $1 -name '*' -maxdepth 1`
        if [ '$result' == '$1' ]; then
            true
        else
            false
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function npmInstallIfNotExist() {
    if [ $# -gt 0 ]; then
        if [ $# -eq 2 ]; then
            result=$(isProgramExisted $2)
        else
            result=$(isProgramExisted $1)
        fi

        if $result ; then
            printResult 2 "$1 has already existed"
        elif [ $result -eq 0 ]; then
            # Always install latest version
            npm install -g $1@latest
            printResult 0 "$1 has successfully been installed."
        else
            printResult 2 "Please indicate the program name to install"
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function brewInstallIfNotExist() {
    # By default, we think tool name ($1) is the command name ($2)
    if [ $# -gt 0 ]; then
        if [ $# -eq 2 ]; then
            result=$(isProgramExisted $2)
        else
            result=$(isProgramExisted $1)
        fi

        if $result ; then
            printResult 2 "$1 has already existed."
        elif [ $result -eq 0 ]; then
            brew install $1
            printResult 0 "$1 has successfully been installed."
        else
            printResult 2 "Please indicate the command name to install"
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function gitCloneOrUpdate() {
    local currentFolder=$PWD
    # Please notice if the parameter is an array, then the number should count the array's length.
    if [ $# -ge 3 ]; then
        local repoInfo=$2
        if [ -d $1 ]; then
            if isFolderEmpty $1 ; then
                printResult 2 "${repoInfo[0]} existed but it's empty."
                git clone ${repoInfo[1]} $1
            else
                printResult 0 "${repoInfo[0]} existed and now will pull the latest version."
                cd $1
                git pull
                cd $currentFolder
            fi
        else
            printResult 2 "${repoInfo[0]} is not existed and now downloading..."
            # TODO: Add new parameter to support --depth
            sudo git clone ${repoInfo[1]} $1
            printResult 0 "${repoInfo[0]} has been successfully downloaded."
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

# TODO: Save package list to file and read it when you need
function rubyPackageInstall() {
    if [ $# -eq 1 ]; then
        local isExisted=0
        read -ra installedPackages <<< `gem list --local --no-version | sed -n '4,$p'`
        for ((i = 0; i < ${#installedPackages[@]}; i += 2)); do
            if [[ ${installedPackages[$i]} == *$1* ]]; then
                isExisted=1
                break
            fi
        done

        if [ $isExisted -eq 1 ]; then
            echo "Ruby package name " $1 " has already existed."
        else
            # Need root permission to write /Library/Ruby/Gems/2.0.0
            sudo gem install $1
            printResult 0 "Ruby package name $1 has been successfully installed."
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function pythonPackageInstall() {
    if [ $# -eq 2 ]; then
        local isExisted=0
        read -ra installedPackages <<< `pip$2 list --format=columns | sed -n '3,$p'`
        for ((i = 0; i < ${#installedPackages[@]}; i += 2)); do
            if [[ "${installedPackages[$i]}" == *"$1" ]]; then
                isExisted=1
                break
            fi
        done

        if [ $isExisted -eq 1 ]; then
            printResult 2 "Python package name $1 has already existed."
        else
            pip$2 install --user $1
            printResult 0 "Python package name $1 has been successfully installed."
        fi
    else
        printResult 1 "Please check parameters."
        exit 1
    fi
}

function setupMacOS() {
    printTitle "Setup Mac OS..."
    printTitle "Show full file path on the tile in Finder..."
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true && killall Finder
    # Adjust the delay time for Dock displaying
    defaults write com.apple.Dock autohide-delay -float 0
    # Adjust the LaunchPad layout
    # defaults write com.apple.dock springboard-columns -int 8
    # defaults write com.apple.dock springboard-rows -int 7
    # Adjust the transpalent value for LaunchPad
    # defaults write com.apple.dock springboard-blur-radius -int 100
    # defaults write com.apple.dock ResetLaunchPad -bool true
    # Adjust the default location for screenshots
    # defaults write com.apple.screencapture location ~/Desktop/screenshots; killall SystemUIServer
    # Adjust the default screenshot type
    # defaults write com.apple.screencapture type jpg && killall SystemUIServe 
    killall Dock
}

function installCustomTools() {
    printTitle "Create custom tools..."
    if [ ! -d "$HOME/.bin" ]; then
        mkdir $HOME/.bin
    else
        rm -rf $HOME/.bin/*
    fi

    cp -r $SourcePath/Bin/* $HOME/.bin
}

function backupCustomTools() {
    printTitle "Backup custom tools..."
    if [ -d $HOME/.bin ]; then
        cp -r $HOME/.bin/* $SourcePath/Bin/
    fi
}

function install() {
    printTitle "Check brew..."
    local result=$(isProgramExisted 'brew')
    if $result ; then
        brew update
        printResult 0 "brew has been successfully updated."
        printTitle "Update all brew packages..."
        brew upgrade
        printResult 0 "All brew packages have been updated."
    else
        result=$(isProgramExisted 'ruby')
        if $result ; then
            printResult 1 "Please install Ruby first."
            exit 1
        else
            ruby $SourcePath/Brew/brew_install 
            printResult 0 "brew has been successfully installed."
        fi
    fi

    printTitle "Check Ruby..."
    brewInstallIfNotExist 'ruby'

    printTitle "Check git..."
    brewInstallIfNotExist 'git'
    cp $SourcePath/Git/.gitconfig $HOME/
    cp $SourcePath/Git/.gitignore_global $HOME/

    printTitle "Check python3..."
    brewInstallIfNotExist 'python3'

    printTitle "Check mongo database..."
    brewInstallIfNotExist 'mongodb' 'mongo'
    cp $SourcePath/MongoDB/.mongorc.js $HOME

    printTitle "Check mysql database..."
    brewInstallIfNotExist 'mariadb' 'mysql'
    cp $SourcePath/MySQL/.my.cnf $HOME

    printTitle "Check tree tool..."
    brewInstallIfNotExist 'tree'

    printTitle "Check Oh-My-Zsh..."
    gitCloneOrUpdate $HOME/.oh-my-zsh ${ohmyzsh[*]}
    cp $SourcePath/Zsh/.zshrc $HOME

    printTitle "Check tmux tool..."
    brewInstallIfNotExist 'tmux'
    brewInstallIfNotExist 'reattach-to-user-namespace'
    rubyPackageInstall 'tmuxinator'
    gitCloneOrUpdate $HOME/.tmux ${ohmytmux[*]}
    ln -s -f $HOME/.tmux/.tmux.conf $HOME
    cp $SourcePath/Other/.tmux.conf.local $HOME

    # config emacs (substitute the default emacs installed by Mac OS)
    printTitle "Check emacs..."
    brewInstallIfNotExist 'emacs'
    gitCloneOrUpdate $HOME/.emacs.d ${spacemacs[*]}
    cp $SourcePath/Emacs/.spacemacs $HOME
    # Remove this file to avoid the strange characters in the Spacemacs' terminal mode.
    if [ -f "$HOME/.iterm2_shell_integration.zsh" ]; then
        rm $HOME/.iterm2_shell_integration.zsh
    fi

    # config fonts
    printTitle "Check Nerd fonts..."
    gitCloneOrUpdate $HOME/.fonts-nerd ${nerdfonts[*]}
    $HOME/.fonts-nerd/install.sh 1> /dev/null
    printTitle "Check Powerline fonts..."
    gitCloneOrUpdate $HOME/.fonts-powerline ${powerlinefonts[*]}
    $HOME/.fonts-powerline/install.sh 1> /dev/null

    printTitle "Check Vim..."
    brewInstallIfNotExist 'vim --with-override-system-vim' 'vim'
    brewInstallIfNotExist 'neovim' 'nvim'
    rubyPackageInstall 'neovim'
    pythonPackageInstall 'neovim' '2'
    pythonPackageInstall 'neovim' '3'
    # Configure SpaceVim
    if [ ! -d $HOME/.SpaceVim ]; then
        curl -sLf https://spacevim.org/install.sh | bash
    fi
    cp $SourcePath/Vim/* $HOME/.SpaceVim.d/

    printTitle "Check ClangFormat tool..."
    brewInstallIfNotExist 'clang-format'
    cp $SourcePath/Other/.clang-format $HOME

    printTitle "Check htop tool..."
    brewInstallIfNotExist 'htop'

    printTitle "Check NodeJS..."
    brewInstallIfNotExist 'node'
    brewInstallIfNotExist 'npm'

    printTitle "Check Node Manager..."
    gitCloneOrUpdate $HOME/.nvm $nvm
    source $HOME/.nvm/nvm.sh

    printTitle "Check hexo..."
    # TODO: Need to use 'npm list -g' to determine if packages are existed or not. 
    npmInstallIfNotExist 'hexo-cli' 'hexo'

    printTitle "Check API BluePrint..."
    npmInstallIfNotExist 'drakov'
    npmInstallIfNotExist 'aglio'

    printTitle "Check travis..."
    rubyPackageInstall 'travis --no-rdoc --no-ri' 'travis'

    installCustomTools

    setupMacOS

    printTitle "Enable Zsh settings..."
    /bin/zsh $HOME/.zshrc

    printTitle "Done."
}

function backup() {
    printTitle "Backup Oh-My-Zsh..."
    cp -r $HOME/.zshrc $SourcePath/Zsh/

    printTitle "Backup emacs..."
    cp -r $HOME/.spacemacs $SourcePath/Emacs/

    printTitle "Backup mongo database..."
    cp $HOME/.mongorc.js $SourcePath/MongoDB/
    #TODO: backup mongo.conf file.

    printTitle "Backup mysql database..."
    cp -r $HOME/.my.cnf $SourcePath/MySQL/

    printTitle "Backup clang format information..."
    cp -r $HOME/.clang-format $SourcePath/Other/

    printTitle "Backup tmux tool's configuration..."
    cp -r $HOME/.tmux.conf.local $SourcePath/Other/

    printTitle "Backup Vim..."
    cp -r $HOME/.SpaceVim.d/* $SourcePath/Vim

    printTitle "Backup System Config..."
    cp -r $HOME/.config/fontconfig/ $SourcePath/Config/fontconfig/
    cp -r $HOME/.config/tmuxinator/ $SourcePath/Config/tmuxinator/

    printTitle "Backup Git Configuration..."
    cp $HOME/.gitconfig $SourcePath/Git/
    cp $HOME/.gitignore_global $SourcePath/Git/

    printTitle "Done."
}

manual="Usage: dotfile [Options] <source path>\n\n
[Options]:\n
-i  Install dot files to this machine.\n
-b  Backup dot files."

# main program
if [ ! $# -eq 2 ]; then
    echo -e $manual
    exit 1
else
    SourcePath=`echo $2 | sed 's/.+\/$//g'`
    if [[ ${SourcePath:0:1} != '/' && ${SourcePath:0:1} != '~' ]]; then
        # Check as relative path
        SourcePath=`echo $SourcePath | sed 's/^\///g'`
        SourcePath=$PWD/$SourcePath;
    fi

    if [ ! -d $SourcePath ] || isFolderEmpty $SourcePath ; then
        printResult 1 "$SourcePath is not existed or empty."
        echo -e $manual
        exit 1
    fi

    if [ "$1" = "-b" ]; then
        backup
        exit $?
    elif [ "$1" = "-i" ]; then
        install
        exit $?
    else
        echo -e $manual
        exit 1
    fi
fi

exit $?
